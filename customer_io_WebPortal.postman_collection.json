{
	"info": {
		"_postman_id": "0baa9a47-2f9d-4de3-8701-4293d08cf503",
		"name": "customer_io_WebPortal",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Positive test",
					"item": [
						{
							"name": "1 Post User Login with valid details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
											"\r",
											"pm.test(\"Status code name has string OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"}); \r",
											"\r",
											"\r",
											"if (responseCode.code === 200){\r",
											"\r",
											"var access_token1 =  \"\";\r",
											"responseData =    JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"access_token1\",  responseData.access_token);\r",
											"}\r",
											"\r",
											"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});\r",
											"\r",
											"\r",
											"if (responseCode.code === 200){\r",
											"var existing_email =  \" \";\r",
											"var existing_passsword =  \" \";\r",
											"var existing_ga_client_id =  \" \";\r",
											"requestData = JSON.parse(request.data);\r",
											"postman.setEnvironmentVariable(\"existing_email\",  requestData.email);\r",
											"postman.setEnvironmentVariable(\"existing_passsword\",  requestData.password);\r",
											"postman.setEnvironmentVariable(\"existing_ga_client_id\",  requestData.ga_client_id);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":  \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 Post User Login with valid details Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
											"\r",
											"pm.test(\"Status code name has string OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"}); \r",
											"\r",
											"if (responseCode.code === 200){\r",
											"\r",
											"var access_token1 =  \"\";\r",
											"responseData =    JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"access_token1\",  responseData.access_token);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":  \"{{existing_email}}\",\r\n    \"password\": \"{{existing_passsword}}\",\r\n    \"ga_client_id\": \"{{existing_ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "Performance Test - Validate Response Time is below 800ms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
											"\r",
											"pm.test(\"Status code name has string OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"}); \r",
											"\r",
											"pm.test(\"Response time is less than 800ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
											"});\r",
											"\r",
											"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative Test",
					"item": [
						{
							"name": "3 Post User Login without providing any values  to email key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"}); \r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"});\r",
											"pm.test(\"pointer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"email must be a valid email address\");\r",
											"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 Post User Login without providing any values  to password key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"}); \r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"});\r",
											"pm.test(\"pointer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"password must be a non-empty string\");\r",
											"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/password\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 Post User Login without providing any values  to ga_client_id key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
											"\r",
											"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "6 Post User Login  without providing any values but space   to email key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"}); \r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"});\r",
											"pm.test(\"pointer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"email must be a valid email address\");\r",
											"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \" \",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "7 Post User Login  without providing any values but space   to password key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unauthorized\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"unauthorized\");\r",
											"    pm.expect(responseData.errors[0]).to.have.property('status', \"401\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \" \",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "8 Post User Login  without providing any values but space   to ga_client_id key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
											"\r",
											"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \" \"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "9 Post User Login with invalid details random_digit value to email key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"}); \r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"});\r",
											"pm.test(\"pointer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"email must be a valid email address\");\r",
											"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomInt}}{{$randomInt}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "10 Post User Login with invalid details random_digit value to password key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unauthorized\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"unauthorized\");\r",
											"    pm.expect(responseData.errors[0]).to.have.property('status', \"401\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{$randomInt}}{{$randomInt}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "11 Post User Login with invalid details random_digit value to ga_client_id key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
											"\r",
											"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{$randomInt}}{{$randomInt}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "12 Post User Login with invalid details alphabets only value to email key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"}); \r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"});\r",
											"pm.test(\"pointer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"email must be a valid email address\");\r",
											"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{randomAlphabet}}{{randomAlphabet}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "13 Post User Login with invalid details alphabets only value to password key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unauthorized\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"unauthorized\");\r",
											"    pm.expect(responseData.errors[0]).to.have.property('status', \"401\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{randomAlphabet}}{{randomAlphabet}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "14 Post User Login with invalid details alphabets only value to ga_client_id key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
											"\r",
											"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{randomAlphabet}}{{randomAlphabet}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "15 Post User Login with invalid details alphanumeric characters value to email key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"}); \r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"});\r",
											"pm.test(\"pointer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"email must be a valid email address\");\r",
											"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomInt}}{{randomAlphabet}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "16 Post User Login with invalid details alphanumeric characters value to password key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unauthorized\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"unauthorized\");\r",
											"    pm.expect(responseData.errors[0]).to.have.property('status', \"401\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{$randomInt}}{{randomAlphabet}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "17 Post User Login with invalid details alphanumeric characters value to ga_client_id key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
											"\r",
											"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{$randomInt}}{{randomAlphabet}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "18 Post User Login with invalid details special characters value to email key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"}); \r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"});\r",
											"pm.test(\"pointer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"email must be a valid email address\");\r",
											"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{randomSpecialCha}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "19 Post User Login with invalid details special characters value to password key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unauthorized\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"unauthorized\");\r",
											"    pm.expect(responseData.errors[0]).to.have.property('status', \"401\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{randomSpecialCha}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "20 Post User Login with invalid details special characters value to ga_client_id key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
											"\r",
											"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{randomSpecialCha}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "21 Post User Login with invalid details Greater than expected character length value to email key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"}); \r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"source\");\r",
											"});\r",
											"pm.test(\"pointer\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"email must be a valid email address\");\r",
											"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{GrtThanExpected}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "22 Post User Login with invalid details Greater than expected character length value to password key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unauthorized\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"unauthorized\");\r",
											"    pm.expect(responseData.errors[0]).to.have.property('status', \"401\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{GrtThanExpected}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "23 Post User Login with invalid details Greater than expected character length value to ga_client_id key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
											"\r",
											"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{GrtThanExpected}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "24 Post User Loginwith vaild  value ofemail toUpperCase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
											"\r",
											"if (responseCode.code === 200){\r",
											"\r",
											"var access_token1 =  \"\";\r",
											"responseData =    JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"access_token1\",  responseData.access_token);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"function convertToUpperCase(){\r",
											"    var value = \"\";\r",
											"    let UppercaseName = pm.environment.get(\"username\");\r",
											"    value = UppercaseName.toUpperCase();\r",
											"    return value;\r",
											"}\r",
											"\r",
											"var UppercaseUsername = convertToUpperCase();\r",
											"postman.setEnvironmentVariable(\"UppercaseUsername\", UppercaseUsername);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{UppercaseUsername}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "25 Post User Login valuepassword toUpperCase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unauthorized\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"unauthorized\");\r",
											"    pm.expect(responseData.errors[0]).to.have.property('status', \"401\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"function convertToUpperCase(){\r",
											"    var value = \"\";\r",
											"    let UppercaseName = pm.environment.get(\"password\");\r",
											"    value = UppercaseName.toUpperCase();\r",
											"    return value;\r",
											"}\r",
											"\r",
											"var UppercasePassword = convertToUpperCase();\r",
											"postman.setEnvironmentVariable(\"UppercasePassword\", UppercasePassword);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{UppercasePassword}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "26 Post User Loginwith vaild  value ofemail toLowerCase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
											"\r",
											"if (responseCode.code === 200){\r",
											"\r",
											"var access_token1 =  \"\";\r",
											"responseData =    JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"access_token1\",  responseData.access_token);\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"function convertToLowerCase(){\r",
											"    var value = \"\";\r",
											"    let LowercaseName = pm.environment.get(\"UppercaseUsername\");\r",
											"    value = LowercaseName.toLowerCase();\r",
											"    return value;\r",
											"}\r",
											"\r",
											"var LowercaseUsername = convertToLowerCase();\r",
											"postman.setEnvironmentVariable(\"LowercaseUsername\", LowercaseUsername);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{LowercaseUsername}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						},
						{
							"name": "27 Post User Login valuepassword toLowerCase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string Unauthorized\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"detail\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"pm.test(\"errors\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
											"});\r",
											"pm.test(\"source\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Check if object contains the property\", function () {\r",
											"    var responseData= pm.response.json();\r",
											"    pm.expect(responseData.errors[0]).to.have.property('detail', \"unauthorized\");\r",
											"    pm.expect(responseData.errors[0]).to.have.property('status', \"401\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"function convertToLowerCase(){\r",
											"    var value = \"\";\r",
											"    let LowercaseName = pm.environment.get(\"UppercasePassword\");\r",
											"    value = LowercaseName.toLowerCase();\r",
											"    return value;\r",
											"}\r",
											"\r",
											"var LowercasePassword = convertToLowerCase();\r",
											"postman.setEnvironmentVariable(\"LowercasePassword\", LowercasePassword);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{username}}\",\r\n    \"password\": \"{{LowercasePassword}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_Url}}/login_email",
									"host": [
										"{{Base_Url}}"
									],
									"path": [
										"login_email"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Create People",
					"item": [
						{
							"name": "Positive Test",
							"item": [
								{
									"name": "1 Post User Login with valid details Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"if (responseCode.code === 200){\r",
													"\r",
													"var access_token1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"access_token1\",  responseData.access_token);\r",
													"}\r",
													"\r",
													"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});\r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var existing_email =  \" \";\r",
													"var existing_passsword =  \" \";\r",
													"var existing_ga_client_id =  \" \";\r",
													"requestData = JSON.parse(request.data);\r",
													"postman.setEnvironmentVariable(\"existing_email\",  requestData.email);\r",
													"postman.setEnvironmentVariable(\"existing_passsword\",  requestData.password);\r",
													"postman.setEnvironmentVariable(\"existing_ga_client_id\",  requestData.ga_client_id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\":  \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/login_email",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"login_email"
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request --relevant Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"if (responseCode.code === 202){\r",
													"var customer_profile_id1 =  \"\";\r",
													"var customer_profile_email1 =  \"\";\r",
													"requestData = JSON.parse(request.data);\r",
													"postman.setEnvironmentVariable(\"customer_profile_id1\",  requestData.customer.attributes.id);\r",
													"postman.setEnvironmentVariable(\"customer_profile_email1\",  requestData.customer.attributes.email);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative Test",
							"item": [
								{
									"name": "2 Post User Login without providing any values  to id key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "3 Post User Login without providing any values  to email key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "4 Post User Login  without providing any values but space   to id key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \" \",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "4b Post User Login  without providing any values but space   to id key Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"status\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('detail', \"Email is invalid.\");\r",
													"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \" \",\r\n            \"email\": \"\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "5 Post User Login  without providing any values but space   to email key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"status\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('detail', \"Email is invalid.\");\r",
													"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \" \",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "6 Post User Login with invalid details random_digit value to id key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"{{$randomInt}}{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "7 Post User Login with invalid details random_digit value to email key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"status\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('detail', \"Email is invalid.\");\r",
													"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"{{$randomInt}}{{$randomInt}}\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "8 Post User Login with invalid details alphabets only value to id key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"{{randomAlphabet}}{{randomAlphabet}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "9 Post User Login with invalid details alphabets only value to email key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"status\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('detail', \"Email is invalid.\");\r",
													"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"{{randomAlphabet}}{{randomAlphabet}}\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "10 Post User Login with invalid details alphanumeric characters value to id key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"{{$randomInt}}{{randomAlphabet}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "11 Post User Login with invalid details alphanumeric characters value to email key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"status\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('detail', \"Email is invalid.\");\r",
													"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"{{$randomInt}}{{randomAlphabet}}\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "12 Post User Login with invalid details special characters value to id key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"{{randomSpecialCha}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "13 Post User Login with invalid details special characters value to email key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"status\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('detail', \"Email is invalid.\");\r",
													"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"{{randomSpecialCha}}\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "14 Post User Login with invalid details Greater than expected character length value to id key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"{{GrtThanExpected}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "15 Post User Login with invalid details Greater than expected character length value to email key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"status\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('detail', \"Email is invalid.\");\r",
													"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZy{{$randomInt}}\",\r\n            \"email\": \"{{GrtThanExpected}}\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "16 Post User Loginwith vaild  value ofid toUpperCase",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "17 Post User Login valueemail toUpperCase",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"function convertToUpperCase(){\r",
													"    var value = \"\";\r",
													"    let UppercaseName = pm.environment.get(\"password\");\r",
													"    value = UppercaseName.toUpperCase();\r",
													"    return value;\r",
													"}\r",
													"\r",
													"var UppercasePassword = convertToUpperCase();\r",
													"postman.setEnvironmentVariable(\"UppercasePassword\", UppercasePassword);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"PUT{{$randomInt}}{{$randomInt}}@MAILINATOR.COM\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "18 Post User Loginwith vaild  value ofid toLowerCase",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"abcd{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "19 Post User Login valueemail toLowerCase",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "20 Post Create People with an existing profile -id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"status\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Email is invalid.\");\r",
													"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/id\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"{{customer_profile_id1}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "21 Post Create People with an existing profile -email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"status\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    //pm.expect(responseData.errors[0]).to.have.property('detail', \"Email is invalid.\");\r",
													"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Update People",
					"item": [
						{
							"name": "Positive Test",
							"item": [
								{
									"name": "Create A profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"if (responseCode.code === 202){\r",
													"var customer_profile_id1 =  \"\";\r",
													"var customer_profile_email1 =  \"\";\r",
													"requestData = JSON.parse(request.data);\r",
													"postman.setEnvironmentVariable(\"customer_profile_id1\",  requestData.customer.attributes.id);\r",
													"postman.setEnvironmentVariable(\"customer_profile_email1\",  requestData.customer.attributes.email);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create 2nd profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													"\r",
													"if (responseCode.code === 202){\r",
													"var customer_profile_id2 =  \"\";\r",
													"var customer_profile_email2 =  \"\";\r",
													"requestData = JSON.parse(request.data);\r",
													"postman.setEnvironmentVariable(\"customer_profile_id2\",  requestData.customer.attributes.id);\r",
													"postman.setEnvironmentVariable(\"customer_profile_email2\",  requestData.customer.attributes.email);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All People for a particular user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (responseCode.code === 200){\r",
													"\r",
													"var profile_id1 =  \"\";\r",
													"var profile_cio_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"profile_id1\",  responseData.customers[0].attributes.id);\r",
													"postman.setEnvironmentVariable(\"profile_cio_id1\",  responseData.customers[0].attributes.cio_id);\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"customer\", function () {pm.expect(pm.response.text()).to.include(\"customer\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"identifiers\", function () {pm.expect(pm.response.text()).to.include(\"identifiers\");});\r",
													"pm.test(\"cio_id\", function () {pm.expect(pm.response.text()).to.include(\"cio_id\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"internal_id\", function () {pm.expect(pm.response.text()).to.include(\"internal_id\");});\r",
													"pm.test(\"attributes\", function () {pm.expect(pm.response.text()).to.include(\"attributes\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"unsubscribed\", function () {pm.expect(pm.response.text()).to.include(\"unsubscribed\");});\r",
													"pm.test(\"links\", function () {pm.expect(pm.response.text()).to.include(\"links\");});\r",
													"pm.test(\"deliveries\", function () {pm.expect(pm.response.text()).to.include(\"deliveries\");});\r",
													"pm.test(\"events\", function () {pm.expect(pm.response.text()).to.include(\"events\");});\r",
													"pm.test(\"drafts\", function () {pm.expect(pm.response.text()).to.include(\"drafts\");});\r",
													"pm.test(\"segments\", function () {pm.expect(pm.response.text()).to.include(\"segments\");});\r",
													"pm.test(\"devices\", function () {pm.expect(pm.response.text()).to.include(\"devices\");});\r",
													"pm.test(\"last_visited\", function () {pm.expect(pm.response.text()).to.include(\"last_visited\");});\r",
													"pm.test(\"unsent_drafts\", function () {pm.expect(pm.response.text()).to.include(\"unsent_drafts\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://fly.customer.io/v1/environments/114158/customers",
											"protocol": "https",
											"host": [
												"fly",
												"customer",
												"io"
											],
											"path": [
												"v1",
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {pm.response.to.have.status(202);});\r",
													"\r",
													"pm.test(\"Status code name has string Accepted\", function () {\r",
													"    pm.response.to.have.status(\"Accepted\");\r",
													"}); \r",
													"\r",
													"pm.test(\"null\", function () {pm.expect(pm.response.text()).to.include(null);});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\",\r\n            \"created_at\": \"1638529784\"\r\n        },\r\n        \"identifiers\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\"\r\n        },\r\n        \"last_visited\": 0,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false,\r\n        \"devices\": []\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{profile_cio_id1}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{profile_cio_id1}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative Test",
							"item": [
								{
									"name": "2 Update Profile  without providing any values  to id key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Method Not Allowed\", function () {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\",\r\n            \"created_at\": \"1638529784\"\r\n        },\r\n        \"identifiers\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\"\r\n        },\r\n        \"last_visited\": 0,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false,\r\n        \"devices\": []\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "3 Update Profile   without providing any values but space   to id key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"unauthorized\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"404\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\",\r\n            \"created_at\": \"1638529784\"\r\n        },\r\n        \"identifiers\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\"\r\n        },\r\n        \"last_visited\": 0,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false,\r\n        \"devices\": []\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/ ",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												" "
											]
										}
									},
									"response": []
								},
								{
									"name": "4 Update Profile  with invalid details random_digit value to id key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"unauthorized\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"404\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\",\r\n            \"created_at\": \"1638529784\"\r\n        },\r\n        \"identifiers\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\"\r\n        },\r\n        \"last_visited\": 0,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false,\r\n        \"devices\": []\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{$randomInt}}{{$randomInt}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{$randomInt}}{{$randomInt}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5 Update Profile  with invalid details alphabets only value to id key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"unauthorized\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"404\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\",\r\n            \"created_at\": \"1638529784\"\r\n        },\r\n        \"identifiers\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\"\r\n        },\r\n        \"last_visited\": 0,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false,\r\n        \"devices\": []\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{$randomInt}}{{randomAlphabet}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{$randomInt}}{{randomAlphabet}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6 Update Profile  with invalid details alphanumeric characters value to id key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"unauthorized\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"404\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\",\r\n            \"created_at\": \"1638529784\"\r\n        },\r\n        \"identifiers\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\"\r\n        },\r\n        \"last_visited\": 0,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false,\r\n        \"devices\": []\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{randomAlphabet}}{{randomAlphabet}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{randomAlphabet}}{{randomAlphabet}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7 Update Profile  with invalid details special characters value to id key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"unauthorized\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"404\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\",\r\n            \"created_at\": \"1638529784\"\r\n        },\r\n        \"identifiers\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\"\r\n        },\r\n        \"last_visited\": 0,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false,\r\n        \"devices\": []\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{randomSpecialCha}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{randomSpecialCha}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8 Update Profile  with invalid details Greater than expected character length value to id key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"unauthorized\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"404\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\",\r\n            \"created_at\": \"1638529784\"\r\n        },\r\n        \"identifiers\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\"\r\n        },\r\n        \"last_visited\": 0,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false,\r\n        \"devices\": []\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{GrtThanExpected}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{GrtThanExpected}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Updating User 1's with User 2's id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"status\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    //pm.expect(responseData.errors[0]).to.have.property('detail', \"Email is invalid.\");\r",
													"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/id\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"{{customer_profile_id2}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\",\r\n            \"created_at\": \"1638529784\"\r\n        },\r\n        \"identifiers\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\"\r\n        },\r\n        \"last_visited\": 0,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false,\r\n        \"devices\": []\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{profile_cio_id1}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{profile_cio_id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Updating User 1's with User 2's email Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"status\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    //pm.expect(responseData.errors[0]).to.have.property('detail', \"Email is invalid.\");\r",
													"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/email\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"{{customer_profile_email2}}\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\",\r\n            \"created_at\": \"1638529784\"\r\n        },\r\n        \"identifiers\": {\r\n            \"cio_id\": \"{{profile_cio_id1}}\",\r\n            \"email\": \"{{customer_profile_email1}}\",\r\n            \"id\": \"{{customer_profile_id1}}\"\r\n        },\r\n        \"last_visited\": 0,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false,\r\n        \"devices\": []\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{profile_cio_id1}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{profile_cio_id1}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete People",
					"item": [
						{
							"name": "Positive Test",
							"item": [
								{
									"name": "Get All People for a particular user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (responseCode.code === 200){\r",
													"\r",
													"var profile_id1 =  \"\";\r",
													"var profile_cio_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"profile_id1\",  responseData.customers[0].attributes.id);\r",
													"postman.setEnvironmentVariable(\"profile_cio_id1\",  responseData.customers[0].attributes.cio_id);\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"customer\", function () {pm.expect(pm.response.text()).to.include(\"customer\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"identifiers\", function () {pm.expect(pm.response.text()).to.include(\"identifiers\");});\r",
													"pm.test(\"cio_id\", function () {pm.expect(pm.response.text()).to.include(\"cio_id\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"internal_id\", function () {pm.expect(pm.response.text()).to.include(\"internal_id\");});\r",
													"pm.test(\"attributes\", function () {pm.expect(pm.response.text()).to.include(\"attributes\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"unsubscribed\", function () {pm.expect(pm.response.text()).to.include(\"unsubscribed\");});\r",
													"pm.test(\"links\", function () {pm.expect(pm.response.text()).to.include(\"links\");});\r",
													"pm.test(\"deliveries\", function () {pm.expect(pm.response.text()).to.include(\"deliveries\");});\r",
													"pm.test(\"events\", function () {pm.expect(pm.response.text()).to.include(\"events\");});\r",
													"pm.test(\"drafts\", function () {pm.expect(pm.response.text()).to.include(\"drafts\");});\r",
													"pm.test(\"segments\", function () {pm.expect(pm.response.text()).to.include(\"segments\");});\r",
													"pm.test(\"devices\", function () {pm.expect(pm.response.text()).to.include(\"devices\");});\r",
													"pm.test(\"last_visited\", function () {pm.expect(pm.response.text()).to.include(\"last_visited\");});\r",
													"pm.test(\"unsent_drafts\", function () {pm.expect(pm.response.text()).to.include(\"unsent_drafts\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://fly.customer.io/v1/environments/114158/customers",
											"protocol": "https",
											"host": [
												"fly",
												"customer",
												"io"
											],
											"path": [
												"v1",
												"environments",
												"114158",
												"customers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get single users profile by ID - after profile has been deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"customer\", function () {pm.expect(pm.response.text()).to.include(\"customer\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"identifiers\", function () {pm.expect(pm.response.text()).to.include(\"identifiers\");});\r",
													"pm.test(\"cio_id\", function () {pm.expect(pm.response.text()).to.include(\"cio_id\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"internal_id\", function () {pm.expect(pm.response.text()).to.include(\"internal_id\");});\r",
													"pm.test(\"attributes\", function () {pm.expect(pm.response.text()).to.include(\"attributes\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"unsubscribed\", function () {pm.expect(pm.response.text()).to.include(\"unsubscribed\");});\r",
													"pm.test(\"links\", function () {pm.expect(pm.response.text()).to.include(\"links\");});\r",
													"pm.test(\"deliveries\", function () {pm.expect(pm.response.text()).to.include(\"deliveries\");});\r",
													"pm.test(\"events\", function () {pm.expect(pm.response.text()).to.include(\"events\");});\r",
													"pm.test(\"drafts\", function () {pm.expect(pm.response.text()).to.include(\"drafts\");});\r",
													"pm.test(\"segments\", function () {pm.expect(pm.response.text()).to.include(\"segments\");});\r",
													"pm.test(\"devices\", function () {pm.expect(pm.response.text()).to.include(\"devices\");});\r",
													"pm.test(\"last_visited\", function () {pm.expect(pm.response.text()).to.include(\"last_visited\");});\r",
													"pm.test(\"unsent_drafts\", function () {pm.expect(pm.response.text()).to.include(\"unsent_drafts\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{profile_cio_id1}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{profile_cio_id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request --relevant Copy 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {pm.response.to.have.status(204);});\r",
													"\r",
													"pm.test(\"Status code name has string No Content\", function () {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{profile_cio_id1}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{profile_cio_id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get single users profile by ID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"404\");\r",
													"});\r",
													"\r",
													"pm.test(\"errors[0]detail has value containing\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"not found (reference \");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"customer\": {\r\n        \"attributes\": {\r\n            \"id\": \"ABCZ{{$randomInt}}\",\r\n            \"email\": \"daddy{{$randomInt}}{{$randomInt}}@mailinator.com\",\r\n            \"created_at\": 1638529784\r\n        },\r\n        \"identifiers\": {},\r\n        \"last_visited\": null,\r\n        \"unsubscribed\": false,\r\n        \"unsent_drafts\": false\r\n    }\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{profile_cio_id1}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{profile_cio_id1}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative Test",
							"item": [
								{
									"name": "1 Delete with no valid profile_cio_id Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {pm.response.to.have.status(405);});\r",
													"\r",
													"pm.test(\"Status code name has string Method Not Allowed\", function () {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"}); \r",
													"\r",
													"pm.test(\"Response Body Contains\", function () {pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "2 Delete with no valid profile_cio_id   but passing space",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {pm.response.to.have.status(400);});\r",
													"\r",
													"pm.test(\"Status code name has string Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"errors[0]details key_value contains\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"bad request (reference \");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/ ",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												" "
											]
										}
									},
									"response": []
								},
								{
									"name": "3 Delete with  invalid profile_cio_id  as random Digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {pm.response.to.have.status(204);});\r",
													"\r",
													"pm.test(\"Status code name has string No Content\", function () {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{$randomInt}}{{$randomInt}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{$randomInt}}{{$randomInt}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4 Delete with  invalid profile_cio_id   as alphabets only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {pm.response.to.have.status(400);});\r",
													"\r",
													"pm.test(\"Status code name has string Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"errors[0]details key_value contains\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"bad request (reference \");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{$randomInt}}{{randomAlphabet}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{$randomInt}}{{randomAlphabet}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5 Delete with  invalid profile_cio_id  as alphanumeric characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {pm.response.to.have.status(400);});\r",
													"\r",
													"pm.test(\"Status code name has string Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"errors[0]details key_value contains\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"bad request (reference \");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{randomAlphabet}}{{randomAlphabet}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{randomAlphabet}}{{randomAlphabet}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6 Delete with  invalid profile_cio_id as special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {pm.response.to.have.status(400);});\r",
													"\r",
													"pm.test(\"Status code name has string Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"errors[0]details key_value contains\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"bad request (reference \");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{randomSpecialCha}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{randomSpecialCha}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7 Delete with  invalid profile_cio_id  as Greater than expected character length",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {pm.response.to.have.status(400);});\r",
													"\r",
													"pm.test(\"Status code name has string Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"errors[0]details key_value contains\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"bad request (reference \");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{GrtThanExpected}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{GrtThanExpected}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8 Delete profile_cio_id that was previously deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {pm.response.to.have.status(204);});\r",
													"\r",
													"pm.test(\"Status code name has string No Content\", function () {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/customers/{{profile_cio_id1}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"customers",
												"{{profile_cio_id1}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Segment",
			"item": [
				{
					"name": "Create Segment",
					"item": [
						{
							"name": "Positive Test",
							"item": [
								{
									"name": "1 Post User Login with valid details Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"\r",
													"var access_token1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"access_token1\",  responseData.access_token);\r",
													"}\r",
													"\r",
													"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});\r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var existing_email =  \" \";\r",
													"var existing_passsword =  \" \";\r",
													"var existing_ga_client_id =  \" \";\r",
													"requestData = JSON.parse(request.data);\r",
													"postman.setEnvironmentVariable(\"existing_email\",  requestData.email);\r",
													"postman.setEnvironmentVariable(\"existing_passsword\",  requestData.password);\r",
													"postman.setEnvironmentVariable(\"existing_ga_client_id\",  requestData.ga_client_id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\":  \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/login_email",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"login_email"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Segment with single Attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"create 1st seg\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": null,\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Segment with Multiple Attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id2 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id2\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"letsDOThis\",\r\n        \"conditions\": {\r\n            \"or\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"name\": \"*\",\r\n                        \"filters\": {},\r\n                        \"type\": \"sent_email\"\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": true\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"withholdingNothing\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Performance Test response time below 300ms",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"pm.test(\"Response time is less than 300ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"create 1st seg\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": null,\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative Test",
							"item": [
								{
									"name": "1 Post create Segment  without providing any values  to  type key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "2 Post create Segment  without providing any values  to  name key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"    pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "3a Post create Segment  without providing any values  to  field key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "3b Post create Segment  without providing any values  to  field key Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "4a Post create Segment  without providing any values  to  operator key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "4b Post create Segment  without providing any values  to  operator key Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "5a Post create Segment  without providing any values  to  inverse key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "5b Post create Segment  without providing any values  to  inverse key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "6 Post create Segment  without providing any values  to  description key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "7 Post create Segment  without providing any values  to  tag_ids key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "8 Post create Segment  without providing any values  to  state key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": \"\",\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "9 Post create Segment  without providing any values  to  updated_at key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": \"\",\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "10 Post create Segment  without providing any values  to  created_at key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": \"\",\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "11 Post create Segment   without providing any values but space   to  type key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \" \",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "12 Post create Segment   without providing any values but space   to  name key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \" \",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "13a Post create Segment   without providing any values but space   to  field key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \" \",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "13b Post create Segment   without providing any values but space   to  field key Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \" \",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "14 Post create Segment   without providing any values but space   to  operator key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "14 Post create Segment   without providing any values but space   to  operator key Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "15a Post create Segment   without providing any values but space   to  inverse key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \" \"\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \" \"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "15b Post create Segment   without providing any values but space   to  inverse key Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \" \"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "16 Post create Segment   without providing any values but space   to  description key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \" \",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "17 Post create Segment   without providing any values but space   to  tag_ids key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \" \"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "18 Post create Segment   without providing any values but space   to  state key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": \" \",\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "19 Post create Segment   without providing any values but space   to  updated_at key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": \" \",\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "20 Post create Segment   without providing any values but space   to  created_at key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": \" \",\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "21 Post create Segment  with invalid details type as random Digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"{{$randomInt}}{{$randomInt}}\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "22 Post create Segment  with invalid details name as random Digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"{{$randomInt}}{{$randomInt}}\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "23a Post create Segment  with invalid details field as random Digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"{{$randomInt}}{{$randomInt}}\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "23b Post create Segment  with invalid details field as random Digits Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"{{$randomInt}}{{$randomInt}}\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "24a Post create Segment  with invalid details operator as random Digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"{{$randomInt}}{{$randomInt}}\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "24b Post create Segment  with invalid details operator as random Digits Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"{{$randomInt}}{{$randomInt}}\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "25a Post create Segment  with invalid details inverse as random Digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"{{$randomInt}}{{$randomInt}}\"\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "25b Post create Segment  with invalid details inverse as random Digits Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"{{$randomInt}}{{$randomInt}}\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "26 Post create Segment  with invalid details description as random Digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"{{$randomInt}}{{$randomInt}}\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "27 Post create Segment  with invalid details tag_ids as random Digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1{{$randomInt}}{{$randomInt}}\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "28 Post create Segment  with invalid details state as random Digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": \"{{$randomInt}}{{$randomInt}}\",\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "29 Post create Segment  with invalid details updated_at as random Digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": \"{{$randomInt}}{{$randomInt}}\",\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "30 Post create Segment  with invalid details created_at as random Digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": \"{{$randomInt}}{{$randomInt}}\",\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "31 Post create Segment  with invalid details type as alphabets only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"{{randomAlphabet}}{{randomAlphabet}}\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "32 Post create Segment  with invalid details name as alphabets only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"{{randomAlphabet}}{{randomAlphabet}}\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "33a Post create Segment  with invalid details field as alphabets only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"{{randomAlphabet}}{{randomAlphabet}}\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "33b Post create Segment  with invalid details field as alphabets only Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"{{randomAlphabet}}{{randomAlphabet}}\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "34a Post create Segment  with invalid details operator as alphabets only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"{{randomAlphabet}}{{randomAlphabet}}\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "34b Post create Segment  with invalid details operator as alphabets only Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"{{randomAlphabet}}{{randomAlphabet}}\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "35 Post create Segment  with invalid details inverse as alphabets only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"{{randomAlphabet}}{{randomAlphabet}}\"\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "35 Post create Segment  with invalid details inverse as alphabets only Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"{{randomAlphabet}}{{randomAlphabet}}\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "36 Post create Segment  with invalid details description as alphabets only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"{{randomAlphabet}}{{randomAlphabet}}\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "37 Post create Segment  with invalid details tag_ids as alphabets only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"{{randomAlphabet}}{{randomAlphabet}}\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "38 Post create Segment  with invalid details state as alphabets only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": \"{{randomAlphabet}}{{randomAlphabet}}\",\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "39 Post create Segment  with invalid details updated_at as alphabets only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": \"{{randomAlphabet}}{{randomAlphabet}}\",\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "40 Post create Segment  with invalid details created_at as alphabets only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": \"{{randomAlphabet}}{{randomAlphabet}}\",\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "41 Post create Segment  with invalid details type as alphanumeric characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"{{$randomInt}}{{randomAlphabet}}\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "42 Post create Segment  with invalid details name as alphanumeric characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"{{$randomInt}}{{randomAlphabet}}\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "43a Post create Segment  with invalid details field as alphanumeric characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"{{$randomInt}}{{randomAlphabet}}\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "43b Post create Segment  with invalid details field as alphanumeric characters Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"{{$randomInt}}{{randomAlphabet}}\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "44a Post create Segment  with invalid details operator as alphanumeric characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"{{$randomInt}}{{randomAlphabet}}\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "44b Post create Segment  with invalid details operator as alphanumeric characters Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"{{$randomInt}}{{randomAlphabet}}\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "45a Post create Segment  with invalid details inverse as alphanumeric characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"{{$randomInt}}{{randomAlphabet}}\"\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "45b Post create Segment  with invalid details inverse as alphanumeric characters Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"{{$randomInt}}{{randomAlphabet}}\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "46 Post create Segment  with invalid details description as alphanumeric characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"{{$randomInt}}{{randomAlphabet}}\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "47 Post create Segment  with invalid details tag_ids as alphanumeric characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"{{$randomInt}}{{randomAlphabet}}\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "48 Post create Segment  with invalid details state as alphanumeric characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": \"{{$randomInt}}{{randomAlphabet}}\",\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "49 Post create Segment  with invalid details updated_at as alphanumeric characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": \"{{$randomInt}}{{randomAlphabet}}\",\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "50 Post create Segment  with invalid details created_at as alphanumeric characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": \"{{$randomInt}}{{randomAlphabet}}\",\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "51 Post create Segment  with invalid details type as special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"{{randomSpecialCha}}\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "52 Post create Segment  with invalid details name as special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"{{randomSpecialCha}}\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "53a Post create Segment  with invalid details field as special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"{{randomSpecialCha}}\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "53b Post create Segment  with invalid details field as special characters Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"{{randomSpecialCha}}\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "54a Post create Segment  with invalid details operator as special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"{{randomSpecialCha}}\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "54b Post create Segment  with invalid details operator as special characters Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"{{randomSpecialCha}}\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "55a Post create Segment  with invalid details inverse as special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"{{randomSpecialCha}}\"\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "55b Post create Segment  with invalid details inverse as special characters Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"{{randomSpecialCha}}\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "56 Post create Segment  with invalid details description as special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"{{randomSpecialCha}}\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "57 Post create Segment  with invalid details tag_ids as special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"{{randomSpecialCha}}\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "58 Post create Segment  with invalid details state as special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": \"{{randomSpecialCha}}\",\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "59 Post create Segment  with invalid details updated_at as special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": \"{{randomSpecialCha}}\",\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "60 Post create Segment  with invalid details created_at as special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": \"{{randomSpecialCha}}\",\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "61 Post create Segment  with invalid details type as Greater than expected character length",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"{{GrtThanExpected}}\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "62 Post create Segment  with invalid details name as Greater than expected character length",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"{{GrtThanExpected}}\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "63a Post create Segment  with invalid details field as Greater than expected character length",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"{{GrtThanExpected}}\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "63b Post create Segment  with invalid details field as Greater than expected character length Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"{{GrtThanExpected}}\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "64a Post create Segment  with invalid details operator as Greater than expected character length",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"{{GrtThanExpected}}\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "64b Post create Segment  with invalid details operator as Greater than expected character length Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"{{GrtThanExpected}}\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "65a Post create Segment  with invalid details inverse as Greater than expected character length",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"{{GrtThanExpected}}\"\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "65b Post create Segment  with invalid details inverse as Greater than expected character length Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"{{GrtThanExpected}}\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "66 Post create Segment  with invalid details description as Greater than expected character length",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"{{GrtThanExpected}}\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "67 Post create Segment  with invalid details tag_ids as Greater than expected character length",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"source\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pointer\");\r",
													"});\r",
													"pm.test(\"pointer\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"   // pm.expect(responseData.errors[0]).to.have.property('detail', \"Name can't be blank\");\r",
													"   // pm.expect(responseData.errors[0].source).to.have.property('pointer', \"/data/attributes/name\");\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"422\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"{{GrtThanExpected}}\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "68 Post create Segment  with invalid details state as Greater than expected character length",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": \"{{GrtThanExpected}}\",\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "69 Post create Segment  with invalid details updated_at as Greater than expected character length",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": \"{{GrtThanExpected}}\",\r\n        \"created_at\": null,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "69 Post create Segment  with invalid details created_at as Greater than expected character length Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": \"\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": \"{{GrtThanExpected}}\",\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null,\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Update Segment",
					"item": [
						{
							"name": "Positive Test",
							"item": [
								{
									"name": "create Segment with single Attribute Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"family_Name\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": \"finished\",\r\n        \"progress\": null,\r\n        \"updated_at\": 1638535361,\r\n        \"created_at\": 1638535361,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": {\r\n            \"draft_newsletters\": [],\r\n            \"sent_newsletters\": [],\r\n            \"campaigns\": [],\r\n            \"broadcasts\": [],\r\n            \"sql_imports\": [],\r\n            \"dashboard\": []\r\n        },\r\n        \"linked_form_type\": \"\",\r\n        \"linked_form_id\": \"\",\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments/{{segment_id1}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments",
												"{{segment_id1}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative Test",
							"item": [
								{
									"name": "create Segment with single Attribute Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id1 =  \"\";\r",
													"var name1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"postman.setEnvironmentVariable(\"name1\",  responseData.segment.name);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"type1\",\r\n        \"name\": \"name1\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": null,\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Segment with single Attribute Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var segment_id2 =  \"\";\r",
													"var name2 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id1\",  responseData.segment.id);\r",
													"postman.setEnvironmentVariable(\"name1\",  responseData.segment.name);\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"type2\",\r\n        \"name\": \"name2\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": null,\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update segment 1's name with that of segment 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"pm.test(\"Status code name has string OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"segment\", function () {pm.expect(pm.response.text()).to.include(\"segment\");});\r",
													"pm.test(\"id\", function () {pm.expect(pm.response.text()).to.include(\"id\");});\r",
													"pm.test(\"environment_id\", function () {pm.expect(pm.response.text()).to.include(\"environment_id\");});\r",
													"pm.test(\"type\", function () {pm.expect(pm.response.text()).to.include(\"type\");});\r",
													"pm.test(\"name\", function () {pm.expect(pm.response.text()).to.include(\"name\");});\r",
													"pm.test(\"description\", function () {pm.expect(pm.response.text()).to.include(\"description\");});\r",
													"pm.test(\"conditions\", function () {pm.expect(pm.response.text()).to.include(\"conditions\");});\r",
													"pm.test(\"or\", function () {pm.expect(pm.response.text()).to.include(\"or\");});\r",
													"pm.test(\"event\", function () {pm.expect(pm.response.text()).to.include(\"event\");});\r",
													"pm.test(\"filters\", function () {pm.expect(pm.response.text()).to.include(\"filters\");});\r",
													"pm.test(\"and\", function () {pm.expect(pm.response.text()).to.include(\"and\");});\r",
													"pm.test(\"field\", function () {pm.expect(pm.response.text()).to.include(\"field\");});\r",
													"pm.test(\"inverse\", function () {pm.expect(pm.response.text()).to.include(\"inverse\");});\r",
													"pm.test(\"operator\", function () {pm.expect(pm.response.text()).to.include(\"operator\");});\r",
													"pm.test(\"value\", function () {pm.expect(pm.response.text()).to.include(\"value\");});\r",
													"pm.test(\"times\", function () {pm.expect(pm.response.text()).to.include(\"times\");});\r",
													"pm.test(\"within\", function () {pm.expect(pm.response.text()).to.include(\"within\");});\r",
													"//pm.test(\"ui_type\", function () {pm.expect(pm.response.text()).to.include(\"ui_type\");});\r",
													"pm.test(\"timestamp\", function () {pm.expect(pm.response.text()).to.include(\"timestamp\");});\r",
													"pm.test(\"progress\", function () {pm.expect(pm.response.text()).to.include(\"progress\");});\r",
													"pm.test(\"state\", function () {pm.expect(pm.response.text()).to.include(\"state\");});\r",
													"pm.test(\"system\", function () {pm.expect(pm.response.text()).to.include(\"system\");});\r",
													"pm.test(\"created_at\", function () {pm.expect(pm.response.text()).to.include(\"created_at\");});\r",
													"pm.test(\"updated_at\", function () {pm.expect(pm.response.text()).to.include(\"updated_at\");});\r",
													"pm.test(\"created_by_user\", function () {pm.expect(pm.response.text()).to.include(\"created_by_user\");});\r",
													"pm.test(\"first_name\", function () {pm.expect(pm.response.text()).to.include(\"first_name\");});\r",
													"pm.test(\"last_name\", function () {pm.expect(pm.response.text()).to.include(\"last_name\");});\r",
													"pm.test(\"email\", function () {pm.expect(pm.response.text()).to.include(\"email\");});\r",
													"pm.test(\"role\", function () {pm.expect(pm.response.text()).to.include(\"role\");});\r",
													"pm.test(\"accessible_workspace_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_workspace_ids\");});\r",
													"pm.test(\"accessible_environment_ids\", function () {pm.expect(pm.response.text()).to.include(\"accessible_environment_ids\");});\r",
													"pm.test(\"last_environment_id\", function () {pm.expect(pm.response.text()).to.include(\"last_environment_id\");});\r",
													"pm.test(\"import_max_size_bytes\", function () {pm.expect(pm.response.text()).to.include(\"import_max_size_bytes\");});\r",
													"pm.test(\"two_factor_authentication_enabled\", function () {pm.expect(pm.response.text()).to.include(\"two_factor_authentication_enabled\");});\r",
													"pm.test(\"external_identity_provider\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_provider\");});\r",
													"pm.test(\"external_identity_email\", function () {pm.expect(pm.response.text()).to.include(\"external_identity_email\");});\r",
													"pm.test(\"user_flags\", function () {pm.expect(pm.response.text()).to.include(\"user_flags\");});\r",
													"pm.test(\"google_drive_credential\", function () {pm.expect(pm.response.text()).to.include(\"google_drive_credential\");});\r",
													"pm.test(\"meta\", function () {pm.expect(pm.response.text()).to.include(\"meta\");});\r",
													"pm.test(\"in_use_active\", function () {pm.expect(pm.response.text()).to.include(\"in_use_active\");});\r",
													"pm.test(\"in_use_archived\", function () {pm.expect(pm.response.text()).to.include(\"in_use_archived\");});\r",
													"pm.test(\"archived\", function () {pm.expect(pm.response.text()).to.include(\"archived\");});\r",
													"pm.test(\"usage\", function () {pm.expect(pm.response.text()).to.include(\"usage\");});\r",
													"pm.test(\"campaigns\", function () {pm.expect(pm.response.text()).to.include(\"campaigns\");});\r",
													"pm.test(\"broadcasts\", function () {pm.expect(pm.response.text()).to.include(\"broadcasts\");});\r",
													"pm.test(\"sent_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"sent_newsletters\");});\r",
													"pm.test(\"draft_newsletters\", function () {pm.expect(pm.response.text()).to.include(\"draft_newsletters\");});\r",
													"pm.test(\"dashboard\", function () {pm.expect(pm.response.text()).to.include(\"dashboard\");});\r",
													"pm.test(\"sql_imports\", function () {pm.expect(pm.response.text()).to.include(\"sql_imports\");});\r",
													"pm.test(\"audience_ids\", function () {pm.expect(pm.response.text()).to.include(\"audience_ids\");});\r",
													"pm.test(\"tag_ids\", function () {pm.expect(pm.response.text()).to.include(\"tag_ids\");});\r",
													"pm.test(\"auto_archived_at\", function () {pm.expect(pm.response.text()).to.include(\"auto_archived_at\");});\r",
													"pm.test(\"linked_form_type\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_type\");});\r",
													"pm.test(\"linked_form_id\", function () {pm.expect(pm.response.text()).to.include(\"linked_form_id\");});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"{{name2}}\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": \"finished\",\r\n        \"progress\": null,\r\n        \"updated_at\": 1638535361,\r\n        \"created_at\": 1638535361,\r\n        \"description\": \"family_description\",\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": {\r\n            \"draft_newsletters\": [],\r\n            \"sent_newsletters\": [],\r\n            \"campaigns\": [],\r\n            \"broadcasts\": [],\r\n            \"sql_imports\": [],\r\n            \"dashboard\": []\r\n        },\r\n        \"linked_form_type\": \"\",\r\n        \"linked_form_id\": \"\",\r\n        \"tag_ids\": [\r\n            \"1\"\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments/{{segment_id1}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments",
												"{{segment_id1}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete Segment",
					"item": [
						{
							"name": "Positive Test",
							"item": [
								{
									"name": "1 Post User Login with valid details Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {pm.response.to.have.status(200);});\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"\r",
													"var access_token1 =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"access_token1\",  responseData.access_token);\r",
													"}\r",
													"\r",
													"pm.test(\"access_token\", function () {pm.expect(pm.response.text()).to.include(\"access_token\");});\r",
													"\r",
													"\r",
													"if (responseCode.code === 200){\r",
													"var existing_email =  \" \";\r",
													"var existing_passsword =  \" \";\r",
													"var existing_ga_client_id =  \" \";\r",
													"requestData = JSON.parse(request.data);\r",
													"postman.setEnvironmentVariable(\"existing_email\",  requestData.email);\r",
													"postman.setEnvironmentVariable(\"existing_passsword\",  requestData.password);\r",
													"postman.setEnvironmentVariable(\"existing_ga_client_id\",  requestData.ga_client_id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\":  \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"ga_client_id\": \"{{ga_client_id}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/login_email",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"login_email"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Segment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if (responseCode.code === 200){\r",
													"\r",
													"var segment_id =  \"\";\r",
													"responseData =    JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"segment_id\",  responseData.segment.id);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"segment\": {\r\n        \"type\": \"dynamic\",\r\n        \"name\": \"create 1st seg\",\r\n        \"conditions\": {\r\n            \"and\": [\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"device_change\",\r\n                        \"name\": \"id\",\r\n                        \"filters\": {\r\n                            \"and\": [\r\n                                {\r\n                                    \"field\": \"to\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": true\r\n                                },\r\n                                {\r\n                                    \"field\": \"from\",\r\n                                    \"operator\": \"exists\",\r\n                                    \"value\": \"\",\r\n                                    \"inverse\": false\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    \"times\": 1,\r\n                    \"within\": 0,\r\n                    \"inverse\": false\r\n                }\r\n            ]\r\n        },\r\n        \"state\": null,\r\n        \"progress\": null,\r\n        \"updated_at\": null,\r\n        \"created_at\": null,\r\n        \"description\": null,\r\n        \"archived\": false,\r\n        \"auto_archived_at\": null,\r\n        \"in_use_active\": false,\r\n        \"in_use_archived\": false,\r\n        \"usage\": null,\r\n        \"linked_form_type\": null,\r\n        \"linked_form_id\": null\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments"
											]
										}
									},
									"response": []
								},
								{
									"name": "1 Delete Segment with a valid Segment Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {pm.response.to.have.status(204);});\r",
													"\r",
													"pm.test(\"Status code name has string No Content\", function () {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments/{{segment_id}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments",
												"{{segment_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative Test",
							"item": [
								{
									"name": "1 Delete Segment with no valid Segment Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {pm.response.to.have.status(405);});\r",
													"\r",
													"pm.test(\"Status code name has string Method Not Allowed\", function () {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"}); \r",
													"\r",
													"pm.test(\"Response Body Contains\", function () {pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments/",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "2 Delete Segment with no valid Segment Id  but passing space",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {pm.response.to.have.status(400);});\r",
													"\r",
													"pm.test(\"Status code name has string Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"errors[0]details key_value contains\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"bad request (reference \");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments/ ",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments",
												" "
											]
										}
									},
									"response": []
								},
								{
									"name": "3 Delete Segment with  invalid Segment Id  as random Digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {pm.response.to.have.status(204);});\r",
													"\r",
													"pm.test(\"Status code name has string No Content\", function () {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments/{{$randomInt}}{{$randomInt}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments",
												"{{$randomInt}}{{$randomInt}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4 Delete Segment with  invalid Segment Id  as alphabets only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {pm.response.to.have.status(400);});\r",
													"\r",
													"pm.test(\"Status code name has string Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"errors[0]details key_value contains\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"bad request (reference \");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments/{{$randomInt}}{{randomAlphabet}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments",
												"{{$randomInt}}{{randomAlphabet}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5 Delete Segment with  invalid Segment Id  as alphanumeric characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {pm.response.to.have.status(400);});\r",
													"\r",
													"pm.test(\"Status code name has string Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"errors[0]details key_value contains\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"bad request (reference \");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments/{{randomAlphabet}}{{randomAlphabet}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments",
												"{{randomAlphabet}}{{randomAlphabet}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6 Delete Segment with  invalid Segment Id  as special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {pm.response.to.have.status(400);});\r",
													"\r",
													"pm.test(\"Status code name has string Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"errors[0]details key_value contains\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"bad request (reference \");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments/{{randomSpecialCha}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments",
												"{{randomSpecialCha}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7 Delete Segment with  invalid Segment Id  as Greater than expected character length",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {pm.response.to.have.status(400);});\r",
													"\r",
													"pm.test(\"Status code name has string Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"}); \r",
													"\r",
													"pm.test(\"detail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
													"});\r",
													"pm.test(\"errors\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"errors\");\r",
													"});\r",
													"pm.test(\"source\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"status\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check if object contains the property\", function () {\r",
													"    var responseData= pm.response.json();\r",
													"    pm.expect(responseData.errors[0]).to.have.property('status', \"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"errors[0]details key_value contains\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"bad request (reference \");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments/{{GrtThanExpected}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments",
												"{{GrtThanExpected}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8 Delete Segment that was previously deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {pm.response.to.have.status(204);});\r",
													"\r",
													"pm.test(\"Status code name has string No Content\", function () {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{Base_Url}}/environments/114158/segments/{{segment_id}}",
											"host": [
												"{{Base_Url}}"
											],
											"path": [
												"environments",
												"114158",
												"segments",
												"{{segment_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "things 2 delete",
			"item": [
				{
					"name": "Segment",
					"item": [
						{
							"name": "New Request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://fly.customer.io/v1/environments/114158/tags",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"environments",
										"114158",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://fly.customer.io/v1/account_by_environment/114158",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"account_by_environment",
										"114158"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get UsersDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200){\r",
											"\r",
											"var account_id1 =  \"\";\r",
											"responseData =    JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"account_id1\",  responseData.environment.account_id);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://fly.customer.io/v1/environments/114158",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"environments",
										"114158"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get UsersDetails Copy 2",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://fly.customer.io/v1/environments/114158/backfills",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"environments",
										"114158",
										"backfills"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get UsersDetails Copy",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://fly.customer.io/v1/environments/114158/deliveries/filters",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"environments",
										"114158",
										"deliveries",
										"filters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get UsersDetails Copy 3",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://fly.customer.io/v1/releases/current",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"releases",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get UsersDetails Copy 4",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://fly.customer.io/v1/accounts/{{account_id1}}/usage",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"accounts",
										"{{account_id1}}",
										"usage"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get UsersDetails Copy 5",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://fly.customer.io/v1/accounts/{{account_id1}}/billing/info?code=",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"accounts",
										"{{account_id1}}",
										"billing",
										"info"
									],
									"query": [
										{
											"key": "code",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"event\": \"Segment: Creation Started\",\r\n    \"properties\": {\r\n        \"path\": \"/env/114158/segments/new\",\r\n        \"referrer\": \"https://fly.customer.io/login/password\",\r\n        \"search\": \"\",\r\n        \"title\": \"New | Segments | Customer.io\",\r\n        \"url\": \"https://fly.customer.io/env/114158/segments/new\",\r\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\",\r\n        \"segment_anonymous_id\": \"9a20beef-2177-4109-8233-b683627cb09d\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://fly.customer.io/v1/environments/114158/track_event",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"environments",
										"114158",
										"track_event"
									]
								}
							},
							"response": []
						},
						{
							"name": "post Copy",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Seq\": 8,\r\n    \"When\": 31628,\r\n    \"Evts\": [\r\n        {\r\n            \"Kind\": 63,\r\n            \"Args\": [\r\n                \"POST\",\r\n                \"https://rs.fullstory.com/rec/bundle?OrgId=MVQPJ&UserId=5871973373337600&SessionId=4668428166914048&PageId=4703352617984000&Seq=7&PageStart=1638524039180&PrevBundleTime=1638524064870&LastActivity=10326\",\r\n                615,\r\n                200,\r\n                \"content-type: text/plain\\r\\n\",\r\n                \"content-length: 29\\r\\ncontent-type: application/json; charset=utf-8\\r\\n\",\r\n                1638524038926,\r\n                932,\r\n                29,\r\n                null,\r\n                null,\r\n                1,\r\n                1\r\n            ],\r\n            \"When\": 31628\r\n        },\r\n        {\r\n            \"Kind\": 57,\r\n            \"Args\": [\r\n                2,\r\n                \"https://rs.fullstory.com/rec/bundle?OrgId=MVQPJ&UserId=5871973373337600&SessionId=4668428166914048&PageId=4703352617984000&Seq=7&PageStart=1638524039180&PrevBundleTime=1638524064870&LastActivity=10326\",\r\n                32796.80000001192,\r\n                612.6999999880791,\r\n                \"xmlhttprequest\",\r\n                0,\r\n                0,\r\n                32796.80000001192,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                33409.5,\r\n                0,\r\n                0,\r\n                0\r\n            ],\r\n            \"When\": 31767\r\n        },\r\n        {\r\n            \"Kind\": 63,\r\n            \"Args\": [\r\n                \"GET\",\r\n                \"https://fly.customer.io/v1/environments/114158/backfills\",\r\n                888,\r\n                200,\r\n                \"accept: application/json, text/javascript, */*; q=0.01\\r\\nauthorization\\r\\nx-ui-version\\r\\nx-requested-with\\r\\n\",\r\n                \"content-encoding: gzip\\r\\ncontent-length: 410\\r\\ncontent-type: application/json; charset=utf-8\\r\\ndate: Fri, 03 Dec 2021 09:34:31 GMT\\r\\nreferrer-policy\\r\\nstrict-transport-security: max-age=15768000\\r\\nx-content-type-options\\r\\nx-frame-options: SAMEORIGIN\\r\\nx-xss-protection\\r\\n\",\r\n                1638524040248,\r\n                0,\r\n                3179,\r\n                null,\r\n                \"{\\\"backfills\\\":[{\\\"environment_id\\\":114158,\\\"id\\\":14,\\\"object_id\\\":1,\\\"priority\\\":\\\"Import\\\",\\\"type\\\":\\\"ImportPreprocess\\\",\\\"state\\\":\\\"Success\\\",\\\"status\\\":\\\"\\\",\\\"created\\\":1638522610,\\\"last_updated\\\":1638522611,\\\"started\\\":1638522610,\\\"completed\\\":1638522611},{\\\"environment_id\\\":114158,\\\"id\\\":13,\\\"object_id\\\":1,\\\"priority\\\":\\\"Import\\\",\\\"type\\\":\\\"ImportPreprocess\\\",\\\"state\\\":\\\"Success\\\",\\\"status\\\":\\\"\\\",\\\"created\\\":1638522498,\\\"last_updated\\\":1638522499,\\\"started\\\":1638522498,\\\"completed\\\":1638522499},{\\\"environment_id\\\":114158,\\\"id\\\":12,\\\"object_id\\\":1,\\\"priority\\\":\\\"Import\\\",\\\"type\\\":\\\"ImportPreprocess\\\",\\\"state\\\":\\\"Success\\\",\\\"status\\\":\\\"\\\",\\\"created\\\":1638522464,\\\"last_updated\\\":1638522465,\\\"started\\\":1638522465,\\\"completed\\\":1638522465},{\\\"environment_id\\\":114158,\\\"id\\\":11,\\\"object_id\\\":1,\\\"priority\\\":\\\"Import\\\",\\\"type\\\":\\\"ImportPreprocess\\\",\\\"state\\\":\\\"Success\\\",\\\"status\\\":\\\"\\\",\\\"created\\\":1638522085,\\\"last_updated\\\":1638522085,\\\"started\\\":1638522085,\\\"completed\\\":1638522085},{\\\"environment_id\\\":114158,\\\"id\\\":10,\\\"priority\\\":\\\"Background\\\",\\\"type\\\":\\\"ConditionSchedule\\\",\\\"state\\\":\\\"Success\\\",\\\"status\\\":\\\"\\\",\\\"created\\\":1638514190,\\\"last_updated\\\":1638514190,\\\"started\\\":1638514190,\\\"completed\\\":1638514190},{\\\"environment_id\\\":114158,\\\"id\\\":9,\\\"object_id\\\":9,\\\"object_version\\\":1,\\\"priority\\\":\\\"Default\\\",\\\"type\\\":\\\"Segment\\\",\\\"state\\\":\\\"Success\\\",\\\"status\\\":\\\"\\\",\\\"created\\\":1638514189,\\\"last_updated\\\":1638514190,\\\"started\\\":1638514190,\\\"completed\\\":1638514190},{\\\"environment_id\\\":114158,\\\"id\\\":8,\\\"object_id\\\":8,\\\"object_version\\\":1,\\\"priority\\\":\\\"Default\\\",\\\"type\\\":\\\"Segment\\\",\\\"state\\\":\\\"Success\\\",\\\"status\\\":\\\"\\\",\\\"created\\\":1638514189,\\\"last_updated\\\":1638514190,\\\"started\\\":1638514190,\\\"completed\\\":1638514190},{\\\"environment_id\\\":114158,\\\"id\\\":7,\\\"object_id\\\":7,\\\"object_version\\\":1,\\\"priority\\\":\\\"Default\\\",\\\"type\\\":\\\"Segment\\\",\\\"state\\\":\\\"Success\\\",\\\"status\\\":\\\"\\\",\\\"created\\\":1638514189,\\\"last_updated\\\":1638514190,\\\"started\\\":1638514190,\\\"completed\\\":1638514190},{\\\"environment_id\\\":114158,\\\"id\\\":6,\\\"object_id\\\":6,\\\"object_version\\\":1,\\\"priority\\\":\\\"Default\\\",\\\"type\\\":\\\"Segment\\\",\\\"state\\\":\\\"Success\\\",\\\"status\\\":\\\"\\\",\\\"created\\\":1638514189,\\\"last_updated\\\":1638514190,\\\"started\\\":1638514190,\\\"completed\\\":1638514190},{\\\"environment_id\\\":114158,\\\"id\\\":5,\\\"object_id\\\":5,\\\"object_version\\\":1,\\\"priority\\\":\\\"Default\\\",\\\"type\\\":\\\"Segment\\\",\\\"state\\\":\\\"Success\\\",\\\"status\\\":\\\"\\\",\\\"created\\\":1638514189,\\\"last_updated\\\":1638514190,\\\"started\\\":1638514190,\\\"completed\\\":1638514190},{\\\"environment_id\\\":114158,\\\"id\\\":4,\\\"object_id\\\":4,\\\"object_version\\\":1,\\\"priority\\\":\\\"Default\\\",\\\"type\\\":\\\"Segment\\\",\\\"state\\\":\\\"Success\\\",\\\"status\\\":\\\"\\\",\\\"created\\\":1638514189,\\\"last_updated\\\":1638514190,\\\"started\\\":1638514190,\\\"completed\\\":1638514190},{\\\"environment_id\\\":114158,\\\"id\\\":3,\\\"object_id\\\":3,\\\"object_version\\\":1,\\\"priority\\\":\\\"Default\\\",\\\"type\\\":\\\"Segment\\\",\\\"state\\\":\\\"Success\\\",\\\"status\\\":\\\"\\\",\\\"created\\\":1638514189,\\\"last_updated\\\":1638514190,\\\"started\\\":1638514190,\\\"completed\\\":1638514190},{\\\"environment_id\\\":114158,\\\"id\\\":2,\\\"object_id\\\":2,\\\"object_version\\\":1,\\\"priority\\\":\\\"Default\\\",\\\"type\\\":\\\"Segment\\\",\\\"state\\\":\\\"Success\\\",\\\"status\\\":\\\"\\\",\\\"created\\\":1638514189,\\\"last_updated\\\":1638514190,\\\"started\\\":1638514189,\\\"completed\\\":1638514190},{\\\"environment_id\\\":114158,\\\"id\\\":1,\\\"object_id\\\":1,\\\"object_version\\\":1,\\\"priority\\\":\\\"Default\\\",\\\"type\\\":\\\"Segment\\\",\\\"state\\\":\\\"Success\\\",\\\"status\\\":\\\"\\\",\\\"created\\\":1638514189,\\\"last_updated\\\":1638514189,\\\"started\\\":1638514189,\\\"completed\\\":1638514189}],\\\"meta\\\":{\\\"continuation\\\":\\\"\\\",\\\"pagination\\\":{\\\"page\\\":-1,\\\"size\\\":20,\\\"total\\\":14}}}\",\r\n                0,\r\n                1\r\n            ],\r\n            \"When\": 33128\r\n        },\r\n        {\r\n            \"Kind\": 57,\r\n            \"Args\": [\r\n                2,\r\n                \"https://fly.customer.io/v1/environments/114158/backfills\",\r\n                34119,\r\n                884.3000000119209,\r\n                \"xmlhttprequest\",\r\n                0,\r\n                0,\r\n                34119,\r\n                34119.80000001192,\r\n                34144.90000000596,\r\n                34144.90000000596,\r\n                34768.5,\r\n                34520.09999999404,\r\n                34768.59999999404,\r\n                35001.5,\r\n                35003.30000001192,\r\n                3179,\r\n                410,\r\n                710\r\n            ],\r\n            \"When\": 33372\r\n        },\r\n        {\r\n            \"Kind\": 9,\r\n            \"Args\": [\r\n                51124,\r\n                750,\r\n                674,\r\n                -98,\r\n                -16.333333333333332,\r\n                104,\r\n                154,\r\n                63.411764705882355,\r\n                0,\r\n                1226\r\n            ],\r\n            \"When\": 51026\r\n        },\r\n        {\r\n            \"Kind\": 9,\r\n            \"Args\": [\r\n                51140,\r\n                673,\r\n                673,\r\n                0,\r\n                0,\r\n                154,\r\n                155,\r\n                1,\r\n                1,\r\n                1226\r\n            ],\r\n            \"When\": 51131\r\n        },\r\n        {\r\n            \"Kind\": 9,\r\n            \"Args\": [\r\n                51283,\r\n                672,\r\n                662,\r\n                -9,\r\n                -22.5,\r\n                155,\r\n                159,\r\n                0,\r\n                0,\r\n                1226\r\n            ],\r\n            \"When\": 51148\r\n        },\r\n        {\r\n            \"Kind\": 9,\r\n            \"Args\": [\r\n                51344,\r\n                661,\r\n                659,\r\n                -2.642857142857143,\r\n                -1.608695652173913,\r\n                159,\r\n                159,\r\n                0,\r\n                0,\r\n                1226\r\n            ],\r\n            \"When\": 51307\r\n        },\r\n        {\r\n            \"Kind\": 52,\r\n            \"Args\": [],\r\n            \"When\": 51366\r\n        },\r\n        {\r\n            \"Kind\": 17,\r\n            \"Args\": [\r\n                446,\r\n                true\r\n            ],\r\n            \"When\": 51366\r\n        },\r\n        {\r\n            \"Kind\": 12,\r\n            \"Args\": [\r\n                659,\r\n                159\r\n            ],\r\n            \"When\": 51370\r\n        },\r\n        {\r\n            \"Kind\": 24,\r\n            \"Args\": [\r\n                446,\r\n                true\r\n            ],\r\n            \"When\": 51371\r\n        },\r\n        {\r\n            \"Kind\": 59,\r\n            \"Args\": [\r\n                1242,\r\n                3\r\n            ],\r\n            \"When\": 51377\r\n        },\r\n        {\r\n            \"Kind\": 13,\r\n            \"Args\": [\r\n                659,\r\n                159\r\n            ],\r\n            \"When\": 51445\r\n        },\r\n        {\r\n            \"Kind\": 16,\r\n            \"Args\": [\r\n                1226,\r\n                659,\r\n                159,\r\n                242,\r\n                129,\r\n                882,\r\n                36\r\n            ],\r\n            \"When\": 51446\r\n        },\r\n        {\r\n            \"Kind\": 11,\r\n            \"Args\": [\r\n                51972,\r\n                3,\r\n                26,\r\n                40,\r\n                14,\r\n                14,\r\n                0,\r\n                0,\r\n                0,\r\n                0\r\n            ],\r\n            \"When\": 51888\r\n        },\r\n        {\r\n            \"Kind\": 10,\r\n            \"Args\": [\r\n                3,\r\n                67,\r\n                0\r\n            ],\r\n            \"When\": 52391\r\n        },\r\n        {\r\n            \"Kind\": 11,\r\n            \"Args\": [\r\n                52556,\r\n                3,\r\n                133,\r\n                217,\r\n                84,\r\n                84,\r\n                0,\r\n                0,\r\n                0,\r\n                0\r\n            ],\r\n            \"When\": 52473\r\n        },\r\n        {\r\n            \"Kind\": 10,\r\n            \"Args\": [\r\n                3,\r\n                301,\r\n                0\r\n            ],\r\n            \"When\": 52640\r\n        },\r\n        {\r\n            \"Kind\": 11,\r\n            \"Args\": [\r\n                52805,\r\n                3,\r\n                375,\r\n                395,\r\n                20,\r\n                20,\r\n                0,\r\n                0,\r\n                0,\r\n                0\r\n            ],\r\n            \"When\": 52721\r\n        },\r\n        {\r\n            \"Kind\": 9,\r\n            \"Args\": [\r\n                53627,\r\n                658,\r\n                657,\r\n                -4.285714285714286,\r\n                0,\r\n                159,\r\n                153,\r\n                -8.571428571428571,\r\n                -5,\r\n                1233\r\n            ],\r\n            \"When\": 53567\r\n        },\r\n        {\r\n            \"Kind\": 9,\r\n            \"Args\": [\r\n                53663,\r\n                656,\r\n                656,\r\n                0,\r\n                0,\r\n                153,\r\n                152,\r\n                -1,\r\n                -1,\r\n                1233\r\n            ],\r\n            \"When\": 53640\r\n        },\r\n        {\r\n            \"Kind\": 12,\r\n            \"Args\": [\r\n                656,\r\n                152\r\n            ],\r\n            \"When\": 53948\r\n        },\r\n        {\r\n            \"Kind\": 17,\r\n            \"Args\": [\r\n                1233,\r\n                true\r\n            ],\r\n            \"When\": 53952\r\n        },\r\n        {\r\n            \"Kind\": 13,\r\n            \"Args\": [\r\n                656,\r\n                152\r\n            ],\r\n            \"When\": 54072\r\n        },\r\n        {\r\n            \"Kind\": 16,\r\n            \"Args\": [\r\n                1233,\r\n                656,\r\n                152,\r\n                593.671875,\r\n                129,\r\n                135.328125,\r\n                36\r\n            ],\r\n            \"When\": 54072\r\n        },\r\n        {\r\n            \"Kind\": 24,\r\n            \"Args\": [\r\n                1233,\r\n                true\r\n            ],\r\n            \"When\": 54105\r\n        },\r\n        {\r\n            \"Kind\": 3,\r\n            \"Args\": [\r\n                1224,\r\n                1431,\r\n                1432,\r\n                1454,\r\n                1456,\r\n                1457,\r\n                1517\r\n            ],\r\n            \"When\": 54127\r\n        },\r\n        {\r\n            \"Kind\": 2,\r\n            \"Args\": [\r\n                757,\r\n                1166,\r\n                [\r\n                    [\r\n                        148,\r\n                        2\r\n                    ],\r\n                    [\r\n                        5405,\r\n                        2\r\n                    ],\r\n                    [\r\n                        474,\r\n                        4\r\n                    ],\r\n                    [\r\n                        5411,\r\n                        3\r\n                    ],\r\n                    [\r\n                        4826,\r\n                        3\r\n                    ],\r\n                    [\r\n                        5417,\r\n                        3\r\n                    ],\r\n                    [\r\n                        1379,\r\n                        3\r\n                    ],\r\n                    [\r\n                        148,\r\n                        2\r\n                    ],\r\n                    \"my-sm mx-auto\",\r\n                    [\r\n                        2559,\r\n                        5\r\n                    ],\r\n                    \"ember326\",\r\n                    [\r\n                        7597,\r\n                        11\r\n                    ],\r\n                    [\r\n                        1646,\r\n                        4\r\n                    ],\r\n                    \"fly-svg-icon__icon  fly-svg-icon__icon--lg fly-svg-icon__icon--default\",\r\n                    [\r\n                        672,\r\n                        3\r\n                    ],\r\n                    [\r\n                        1736,\r\n                        2\r\n                    ],\r\n                    [\r\n                        1738,\r\n                        2\r\n                    ],\r\n                    [\r\n                        9566,\r\n                        5\r\n                    ],\r\n                    [\r\n                        3345,\r\n                        6\r\n                    ],\r\n                    [\r\n                        1751,\r\n                        2\r\n                    ],\r\n                    [\r\n                        6057,\r\n                        6\r\n                    ],\r\n                    [\r\n                        1091,\r\n                        4\r\n                    ],\r\n                    [\r\n                        5434,\r\n                        3\r\n                    ],\r\n                    [\r\n                        2686,\r\n                        5\r\n                    ],\r\n                    [\r\n                        5442,\r\n                        2\r\n                    ],\r\n                    [\r\n                        8009,\r\n                        6\r\n                    ],\r\n                    [\r\n                        1989,\r\n                        4\r\n                    ],\r\n                    19\r\n                ]\r\n            ],\r\n            \"When\": 54127\r\n        },\r\n        {\r\n            \"Kind\": 78,\r\n            \"Args\": [\r\n                [\r\n                    0,\r\n                    1,\r\n                    2,\r\n                    54127,\r\n                    1\r\n                ]\r\n            ],\r\n            \"When\": 54127\r\n        },\r\n        {\r\n            \"Kind\": 4,\r\n            \"Args\": [\r\n                91,\r\n                \"class\",\r\n                \"segments-loading-route\\n    application-container\\n    \\n    \"\r\n            ],\r\n            \"When\": 54127\r\n        },\r\n        {\r\n            \"Kind\": 42,\r\n            \"Args\": [\r\n                1140,\r\n                695\r\n            ],\r\n            \"When\": 54137\r\n        },\r\n        {\r\n            \"Kind\": 10,\r\n            \"Args\": [\r\n                3,\r\n                0,\r\n                0\r\n            ],\r\n            \"When\": 54137\r\n        },\r\n        {\r\n            \"Kind\": 9,\r\n            \"Args\": [\r\n                54621,\r\n                657,\r\n                674,\r\n                10,\r\n                16.363636363636363,\r\n                152,\r\n                153,\r\n                0,\r\n                5.454545454545455,\r\n                757\r\n            ],\r\n            \"When\": 54561\r\n        },\r\n        {\r\n            \"Kind\": 9,\r\n            \"Args\": [\r\n                54693,\r\n                679,\r\n                727,\r\n                38.4,\r\n                32,\r\n                153,\r\n                173,\r\n                0,\r\n                8,\r\n                757\r\n            ],\r\n            \"When\": 54629\r\n        },\r\n        {\r\n            \"Kind\": 9,\r\n            \"Args\": [\r\n                54745,\r\n                731,\r\n                760,\r\n                25.142857142857142,\r\n                18.857142857142858,\r\n                175,\r\n                194,\r\n                18.857142857142858,\r\n                12.571428571428571,\r\n                3\r\n            ],\r\n            \"When\": 54701\r\n        },\r\n        {\r\n            \"Kind\": 37,\r\n            \"Args\": [\r\n                \"https://fly.customer.io/env/114158/segments/new\"\r\n            ],\r\n            \"When\": 54861\r\n        },\r\n        {\r\n            \"Kind\": 3,\r\n            \"Args\": [\r\n                1455,\r\n                2985\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 2,\r\n            \"Args\": [\r\n                6,\r\n                -1,\r\n                [\r\n                    13,\r\n                    \"New | Segments | Customer.io\"\r\n                ]\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 78,\r\n            \"Args\": [\r\n                [\r\n                    0,\r\n                    1,\r\n                    2,\r\n                    54933,\r\n                    0\r\n                ]\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 2,\r\n            \"Args\": [\r\n                618,\r\n                651,\r\n                [\r\n                    [\r\n                        318,\r\n                        2\r\n                    ]\r\n                ]\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 78,\r\n            \"Args\": [\r\n                [\r\n                    0,\r\n                    1,\r\n                    2,\r\n                    54933,\r\n                    0\r\n                ]\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 2,\r\n            \"Args\": [\r\n                618,\r\n                651,\r\n                [\r\n                    [\r\n                        1014,\r\n                        3\r\n                    ],\r\n                    [\r\n                        145,\r\n                        3\r\n                    ],\r\n                    [\r\n                        2418,\r\n                        3\r\n                    ],\r\n                    [\r\n                        2421,\r\n                        4\r\n                    ],\r\n                    [\r\n                        2425,\r\n                        2\r\n                    ],\r\n                    [\r\n                        2427,\r\n                        4\r\n                    ],\r\n                    143,\r\n                    [\r\n                        2432,\r\n                        2\r\n                    ],\r\n                    [\r\n                        2476,\r\n                        4\r\n                    ],\r\n                    [\r\n                        2466,\r\n                        3\r\n                    ],\r\n                    [\r\n                        2441,\r\n                        5\r\n                    ],\r\n                    [\r\n                        217,\r\n                        2\r\n                    ],\r\n                    [\r\n                        1704,\r\n                        2\r\n                    ],\r\n                    \"ember327\",\r\n                    [\r\n                        2451,\r\n                        2\r\n                    ],\r\n                    [\r\n                        4715,\r\n                        3\r\n                    ],\r\n                    [\r\n                        2456,\r\n                        5\r\n                    ],\r\n                    [\r\n                        2461,\r\n                        6\r\n                    ],\r\n                    [\r\n                        2439,\r\n                        2\r\n                    ],\r\n                    [\r\n                        2441,\r\n                        5\r\n                    ],\r\n                    13,\r\n                    \"New\",\r\n                    [\r\n                        2476,\r\n                        4\r\n                    ],\r\n                    [\r\n                        628,\r\n                        4\r\n                    ],\r\n                    [\r\n                        5516,\r\n                        3\r\n                    ],\r\n                    [\r\n                        11156,\r\n                        7\r\n                    ],\r\n                    19\r\n                ]\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 78,\r\n            \"Args\": [\r\n                [\r\n                    0,\r\n                    1,\r\n                    2,\r\n                    54933,\r\n                    0\r\n                ]\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 2,\r\n            \"Args\": [\r\n                618,\r\n                651,\r\n                [\r\n                    [\r\n                        375,\r\n                        2\r\n                    ]\r\n                ]\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 78,\r\n            \"Args\": [\r\n                [\r\n                    0,\r\n                    1,\r\n                    2,\r\n                    54933,\r\n                    0\r\n                ]\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 2,\r\n            \"Args\": [\r\n                757,\r\n                1166,\r\n                [\r\n                    [\r\n                        318,\r\n                        2\r\n                    ]\r\n                ]\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 78,\r\n            \"Args\": [\r\n                [\r\n                    0,\r\n                    1,\r\n                    2,\r\n                    54933,\r\n                    0\r\n                ]\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 2,\r\n            \"Args\": [\r\n                757,\r\n                1166,\r\n                [\r\n                    [\r\n                        755,\r\n                        2\r\n                    ],\r\n                    [\r\n                        474,\r\n                        4\r\n                    ],\r\n                    [\r\n                        4702,\r\n                        2\r\n                    ],\r\n                    [\r\n                        13,\r\n                        2\r\n                    ],\r\n                    [\r\n                        4712,\r\n                        3\r\n                    ],\r\n                    [\r\n                        12,\r\n                        2\r\n                    ],\r\n                    \"Name your segment\",\r\n                    [\r\n                        3504,\r\n                        7\r\n                    ],\r\n                    143,\r\n                    \"fly-card mt-md\",\r\n                    [\r\n                        465,\r\n                        5\r\n                    ],\r\n                    [\r\n                        3488,\r\n                        2\r\n                    ],\r\n                    [\r\n                        5530,\r\n                        4\r\n                    ],\r\n                    \"fly-card__section-body\",\r\n                    [\r\n                        4761,\r\n                        5\r\n                    ],\r\n                    \"fly-form-group\",\r\n                    [\r\n                        163,\r\n                        3\r\n                    ],\r\n                    3589,\r\n                    6148,\r\n                    \"name\",\r\n                    [\r\n                        6190,\r\n                        3\r\n                    ],\r\n                    [\r\n                        197,\r\n                        4\r\n                    ],\r\n                    88,\r\n                    \"ember328\",\r\n                    143,\r\n                    \"fly-input w-4 max-w-full ember-view\",\r\n                    1,\r\n                    206,\r\n                    \":data-test-fly-input-input\",\r\n                    6,\r\n                    \":autofocus\",\r\n                    [\r\n                        6122,\r\n                        2\r\n                    ],\r\n                    \"fly-form-control\",\r\n                    [\r\n                        4476,\r\n                        3\r\n                    ],\r\n                    [\r\n                        1106,\r\n                        3\r\n                    ],\r\n                    [\r\n                        5899,\r\n                        4\r\n                    ],\r\n                    [\r\n                        148,\r\n                        2\r\n                    ],\r\n                    [\r\n                        11300,\r\n                        2\r\n                    ],\r\n                    [\r\n                        179,\r\n                        2\r\n                    ],\r\n                    [\r\n                        11304,\r\n                        2\r\n                    ],\r\n                    36,\r\n                    [\r\n                        12,\r\n                        2\r\n                    ],\r\n                    \"Description\",\r\n                    [\r\n                        181,\r\n                        3\r\n                    ],\r\n                    \"<TEXTAREA\",\r\n                    \":rows\",\r\n                    7098,\r\n                    4815,\r\n                    \"Add an optional description of your segment\",\r\n                    88,\r\n                    36,\r\n                    143,\r\n                    \"ember-text-area ember-view fly-form-control py-xs\",\r\n                    [\r\n                        2904,\r\n                        3\r\n                    ],\r\n                    [\r\n                        2912,\r\n                        3\r\n                    ],\r\n                    143,\r\n                    [\r\n                        11338,\r\n                        3\r\n                    ],\r\n                    165,\r\n                    [\r\n                        11258,\r\n                        3\r\n                    ],\r\n                    [\r\n                        1169,\r\n                        3\r\n                    ],\r\n                    3589,\r\n                    [\r\n                        12,\r\n                        2\r\n                    ],\r\n                    \"Tags\",\r\n                    [\r\n                        4357,\r\n                        6\r\n                    ],\r\n                    [\r\n                        10635,\r\n                        3\r\n                    ],\r\n                    \"fly-flex jc-start mt-xxs\",\r\n                    [\r\n                        4755,\r\n                        5\r\n                    ],\r\n                    \"fly-power-select-multiple  fly-flex__item tag-editor__dropdown w-3/12\",\r\n                    [\r\n                        2509,\r\n                        6\r\n                    ],\r\n                    [\r\n                        1169,\r\n                        3\r\n                    ],\r\n                    [\r\n                        491,\r\n                        4\r\n                    ],\r\n                    \"ember-basic-dropdown-trigger\\n    \\n    \\n    \\n\\n     ember-power-select-trigger ember-power-select-multiple-trigger \",\r\n                    [\r\n                        2650,\r\n                        5\r\n                    ],\r\n                    \"ember330-trigger\",\r\n                    774,\r\n                    \"ember-basic-dropdown-content-ember330\",\r\n                    [\r\n                        4866,\r\n                        5\r\n                    ],\r\n                    [\r\n                        5185,\r\n                        4\r\n                    ],\r\n                    [\r\n                        8414,\r\n                        4\r\n                    ],\r\n                    [\r\n                        4879,\r\n                        2\r\n                    ],\r\n                    [\r\n                        5845,\r\n                        3\r\n                    ],\r\n                    [\r\n                        324,\r\n                        3\r\n                    ],\r\n                    [\r\n                        4887,\r\n                        2\r\n                    ],\r\n                    [\r\n                        5413,\r\n                        4\r\n                    ],\r\n                    [\r\n                        4893,\r\n                        2\r\n                    ],\r\n                    [\r\n                        719,\r\n                        2\r\n                    ],\r\n                    [\r\n                        2166,\r\n                        2\r\n                    ],\r\n                    \"ember-power-select-multiple-options-ember330\",\r\n                    [\r\n                        4900,\r\n                        2\r\n                    ],\r\n                    [\r\n                        4902,\r\n                        6\r\n                    ],\r\n                    [\r\n                        3698,\r\n                        3\r\n                    ],\r\n                    [\r\n                        4911,\r\n                        3\r\n                    ],\r\n                    [\r\n                        4914,\r\n                        5\r\n                    ],\r\n                    [\r\n                        4919,\r\n                        2\r\n                    ],\r\n                    [\r\n                        4921,\r\n                        2\r\n                    ],\r\n                    [\r\n                        4923,\r\n                        2\r\n                    ],\r\n                    [\r\n                        4925,\r\n                        2\r\n                    ],\r\n                    [\r\n                        4927,\r\n                        2\r\n                    ],\r\n                    \"ember-power-select-trigger-multiple-input-ember330\",\r\n                    1884,\r\n                    \"ember-power-select-options-ember330\",\r\n                    [\r\n                        4932,\r\n                        2\r\n                    ],\r\n                    4815,\r\n                    \"Choose or create a tag\",\r\n                    [\r\n                        4936,\r\n                        2\r\n                    ],\r\n                    [\r\n                        7099,\r\n                        6\r\n                    ],\r\n                    [\r\n                        4669,\r\n                        3\r\n                    ],\r\n                    [\r\n                        1942,\r\n                        2\r\n                    ],\r\n                    88,\r\n                    \"ember331\",\r\n                    [\r\n                        4951,\r\n                        2\r\n                    ],\r\n                    [\r\n                        4953,\r\n                        6\r\n                    ],\r\n                    [\r\n                        1964,\r\n                        3\r\n                    ],\r\n                    [\r\n                        2138,\r\n                        3\r\n                    ],\r\n                    [\r\n                        854,\r\n                        4\r\n                    ],\r\n                    [\r\n                        4969,\r\n                        4\r\n                    ],\r\n                    [\r\n                        862,\r\n                        2\r\n                    ],\r\n                    [\r\n                        4975,\r\n                        4\r\n                    ],\r\n                    [\r\n                        2369,\r\n                        5\r\n                    ],\r\n                    [\r\n                        5016,\r\n                        3\r\n                    ],\r\n                    [\r\n                        11403,\r\n                        4\r\n                    ],\r\n                    [\r\n                        4684,\r\n                        6\r\n                    ],\r\n                    [\r\n                        5205,\r\n                        3\r\n                    ],\r\n                    88,\r\n                    11418,\r\n                    [\r\n                        5002,\r\n                        6\r\n                    ],\r\n                    [\r\n                        1556,\r\n                        7\r\n                    ],\r\n                    [\r\n                        5016,\r\n                        3\r\n                    ],\r\n                    [\r\n                        6548,\r\n                        3\r\n                    ],\r\n                    [\r\n                        4675,\r\n                        6\r\n                    ],\r\n                    [\r\n                        10186,\r\n                        6\r\n                    ],\r\n                    [\r\n                        5023,\r\n                        5\r\n                    ],\r\n                    [\r\n                        459,\r\n                        5\r\n                    ],\r\n                    \"fly-page-header mt-lg\",\r\n                    [\r\n                        4709,\r\n                        4\r\n                    ],\r\n                    143,\r\n                    [\r\n                        4714,\r\n                        2\r\n                    ],\r\n                    13,\r\n                    \"Choose a segment type\",\r\n                    [\r\n                        11274,\r\n                        8\r\n                    ],\r\n                    \"grid-container-fluid mt-md\",\r\n                    [\r\n                        465,\r\n                        5\r\n                    ],\r\n                    [\r\n                        6084,\r\n                        2\r\n                    ],\r\n                    [\r\n                        5530,\r\n                        4\r\n                    ],\r\n                    \"fly-card grid-sm-6\",\r\n                    [\r\n                        4761,\r\n                        5\r\n                    ],\r\n                    [\r\n                        11288,\r\n                        3\r\n                    ],\r\n                    [\r\n                        11370,\r\n                        2\r\n                    ],\r\n                    143,\r\n                    [\r\n                        3494,\r\n                        2\r\n                    ],\r\n                    [\r\n                        3873,\r\n                        4\r\n                    ],\r\n                    \"fly-flex__item fly-flex\",\r\n                    [\r\n                        1011,\r\n                        3\r\n                    ],\r\n                    [\r\n                        511,\r\n                        2\r\n                    ],\r\n                    \"ember332\",\r\n                    [\r\n                        3432,\r\n                        5\r\n                    ],\r\n                    [\r\n                        7768,\r\n                        6\r\n                    ],\r\n                    [\r\n                        10418,\r\n                        6\r\n                    ],\r\n                    [\r\n                        533,\r\n                        2\r\n                    ],\r\n                    [\r\n                        11119,\r\n                        3\r\n                    ],\r\n                    [\r\n                        9133,\r\n                        8\r\n                    ],\r\n                    [\r\n                        1228,\r\n                        4\r\n                    ],\r\n                    [\r\n                        11134,\r\n                        3\r\n                    ],\r\n                    [\r\n                        3806,\r\n                        4\r\n                    ],\r\n                    3536,\r\n                    [\r\n                        3499,\r\n                        2\r\n                    ],\r\n                    [\r\n                        12,\r\n                        2\r\n                    ],\r\n                    \"Data-driven\",\r\n                    [\r\n                        3949,\r\n                        6\r\n                    ],\r\n                    [\r\n                        1127,\r\n                        3\r\n                    ],\r\n                    [\r\n                        148,\r\n                        2\r\n                    ],\r\n                    [\r\n                        11294,\r\n                        2\r\n                    ],\r\n                    [\r\n                        3873,\r\n                        4\r\n                    ],\r\n                    \"text-sm\",\r\n                    [\r\n                        1011,\r\n                        3\r\n                    ],\r\n                    [\r\n                        193,\r\n                        3\r\n                    ],\r\n                    \"People already in this workspace will\\n                \",\r\n                    [\r\n                        3098,\r\n                        3\r\n                    ],\r\n                    \"automatically move in and out of this segment\",\r\n                    [\r\n                        19,\r\n                        2\r\n                    ],\r\n                    \"\\n                when they meet the data conditions that you set.\",\r\n                    [\r\n                        19,\r\n                        2\r\n                    ],\r\n                    \"\\n\\n              \",\r\n                    217,\r\n                    [\r\n                        222,\r\n                        2\r\n                    ],\r\n                    [\r\n                        220,\r\n                        2\r\n                    ],\r\n                    58,\r\n                    \"https://customer.io/docs/documentation/segmenting-users.html#data-driven-segments\",\r\n                    143,\r\n                    \"link-primary no-underline\",\r\n                    [\r\n                        3617,\r\n                        3\r\n                    ],\r\n                    [\r\n                        511,\r\n                        2\r\n                    ],\r\n                    \"ember333\",\r\n                    [\r\n                        11100,\r\n                        12\r\n                    ],\r\n                    [\r\n                        668,\r\n                        3\r\n                    ],\r\n                    \"fly-svg-icon__icon  fly-svg-icon__icon--sm fly-svg-icon__icon--primary\",\r\n                    [\r\n                        672,\r\n                        3\r\n                    ],\r\n                    [\r\n                        5163,\r\n                        3\r\n                    ],\r\n                    [\r\n                        1511,\r\n                        7\r\n                    ],\r\n                    [\r\n                        2594,\r\n                        3\r\n                    ],\r\n                    [\r\n                        548,\r\n                        3\r\n                    ],\r\n                    \"\\n                What is a Data-driven Segment?\\n              \",\r\n                    [\r\n                        3819,\r\n                        5\r\n                    ],\r\n                    [\r\n                        1031,\r\n                        2\r\n                    ],\r\n                    143,\r\n                    \"text-center mt-md\",\r\n                    [\r\n                        11645,\r\n                        4\r\n                    ],\r\n                    [\r\n                        6906,\r\n                        5\r\n                    ],\r\n                    [\r\n                        8341,\r\n                        7\r\n                    ],\r\n                    591,\r\n                    \"tooltip-ember334\",\r\n                    [\r\n                        6480,\r\n                        4\r\n                    ],\r\n                    3619,\r\n                    703,\r\n                    [\r\n                        5543,\r\n                        2\r\n                    ],\r\n                    143,\r\n                    [\r\n                        3113,\r\n                        2\r\n                    ],\r\n                    [\r\n                        5911,\r\n                        3\r\n                    ],\r\n                    \"\\n                  Create Data-driven Segment\\n                \",\r\n                    [\r\n                        3669,\r\n                        3\r\n                    ],\r\n                    [\r\n                        598,\r\n                        4\r\n                    ],\r\n                    [\r\n                        1022,\r\n                        2\r\n                    ],\r\n                    [\r\n                        4522,\r\n                        5\r\n                    ],\r\n                    [\r\n                        6821,\r\n                        6\r\n                    ],\r\n                    [\r\n                        148,\r\n                        2\r\n                    ],\r\n                    [\r\n                        11626,\r\n                        2\r\n                    ],\r\n                    [\r\n                        4498,\r\n                        3\r\n                    ],\r\n                    143,\r\n                    [\r\n                        11632,\r\n                        4\r\n                    ],\r\n                    [\r\n                        148,\r\n                        2\r\n                    ],\r\n                    \"fly-card__section-header fly-flex jc-start\",\r\n                    [\r\n                        8954,\r\n                        4\r\n                    ],\r\n                    88,\r\n                    \"ember335\",\r\n                    [\r\n                        11651,\r\n                        6\r\n                    ],\r\n                    [\r\n                        8201,\r\n                        7\r\n                    ],\r\n                    [\r\n                        2836,\r\n                        6\r\n                    ],\r\n                    [\r\n                        6348,\r\n                        2\r\n                    ],\r\n                    [\r\n                        6350,\r\n                        2\r\n                    ],\r\n                    [\r\n                        11123,\r\n                        6\r\n                    ],\r\n                    544,\r\n                    [\r\n                        6359,\r\n                        2\r\n                    ],\r\n                    [\r\n                        7092,\r\n                        5\r\n                    ],\r\n                    [\r\n                        11692,\r\n                        2\r\n                    ],\r\n                    [\r\n                        3500,\r\n                        2\r\n                    ],\r\n                    13,\r\n                    \"Manual\",\r\n                    [\r\n                        251,\r\n                        5\r\n                    ],\r\n                    818,\r\n                    [\r\n                        11707,\r\n                        3\r\n                    ],\r\n                    [\r\n                        167,\r\n                        3\r\n                    ],\r\n                    [\r\n                        148,\r\n                        2\r\n                    ],\r\n                    [\r\n                        11715,\r\n                        2\r\n                    ],\r\n                    [\r\n                        3811,\r\n                        3\r\n                    ],\r\n                    [\r\n                        12,\r\n                        2\r\n                    ],\r\n                    \"\\n                People already in this workspace will move into this manual segment whenever you\\n                \",\r\n                    [\r\n                        3098,\r\n                        3\r\n                    ],\r\n                    \"upload a CSV file or call our API\",\r\n                    [\r\n                        19,\r\n                        2\r\n                    ],\r\n                    \".\\n              \",\r\n                    [\r\n                        11730,\r\n                        3\r\n                    ],\r\n                    [\r\n                        11733,\r\n                        2\r\n                    ],\r\n                    223,\r\n                    [\r\n                        11736,\r\n                        3\r\n                    ],\r\n                    \"https://customer.io/docs/documentation/segmenting-users.html#manual-segments\",\r\n                    [\r\n                        11740,\r\n                        2\r\n                    ],\r\n                    [\r\n                        11742,\r\n                        4\r\n                    ],\r\n                    88,\r\n                    \"ember336\",\r\n                    [\r\n                        11748,\r\n                        13\r\n                    ],\r\n                    [\r\n                        529,\r\n                        2\r\n                    ],\r\n                    [\r\n                        11763,\r\n                        2\r\n                    ],\r\n                    [\r\n                        5161,\r\n                        3\r\n                    ],\r\n                    [\r\n                        676,\r\n                        3\r\n                    ],\r\n                    [\r\n                        3345,\r\n                        6\r\n                    ],\r\n                    [\r\n                        11777,\r\n                        4\r\n                    ],\r\n                    [\r\n                        19,\r\n                        2\r\n                    ],\r\n                    \"\\n                What is a Manual Segment?\\n              \",\r\n                    [\r\n                        11784,\r\n                        6\r\n                    ],\r\n                    [\r\n                        148,\r\n                        2\r\n                    ],\r\n                    [\r\n                        11792,\r\n                        2\r\n                    ],\r\n                    [\r\n                        3738,\r\n                        2\r\n                    ],\r\n                    [\r\n                        6860,\r\n                        6\r\n                    ],\r\n                    [\r\n                        11802,\r\n                        8\r\n                    ],\r\n                    \"tooltip-ember337\",\r\n                    [\r\n                        11811,\r\n                        5\r\n                    ],\r\n                    [\r\n                        11816,\r\n                        2\r\n                    ],\r\n                    [\r\n                        6122,\r\n                        2\r\n                    ],\r\n                    [\r\n                        11820,\r\n                        3\r\n                    ],\r\n                    [\r\n                        12,\r\n                        2\r\n                    ],\r\n                    \"\\n                  Create Manual Segment\\n                \",\r\n                    [\r\n                        11826,\r\n                        4\r\n                    ],\r\n                    [\r\n                        7643,\r\n                        4\r\n                    ],\r\n                    [\r\n                        10746,\r\n                        6\r\n                    ],\r\n                    [\r\n                        6062,\r\n                        7\r\n                    ],\r\n                    [\r\n                        3121,\r\n                        6\r\n                    ]\r\n                ]\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 78,\r\n            \"Args\": [\r\n                [\r\n                    0,\r\n                    1,\r\n                    2,\r\n                    54933,\r\n                    1\r\n                ]\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 2,\r\n            \"Args\": [\r\n                757,\r\n                1166,\r\n                [\r\n                    [\r\n                        375,\r\n                        2\r\n                    ]\r\n                ]\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 78,\r\n            \"Args\": [\r\n                [\r\n                    0,\r\n                    1,\r\n                    2,\r\n                    54933,\r\n                    0\r\n                ]\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 4,\r\n            \"Args\": [\r\n                91,\r\n                \"class\",\r\n                \"app-environments-environment-segments-new-route\\n    application-container\\n    \\n    \"\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 63,\r\n            \"Args\": [\r\n                \"GET\",\r\n                \"https://fly.customer.io/v1/environments/114158/deliveries/filters\",\r\n                763,\r\n                200,\r\n                \"accept: */*\\r\\nauthorization\\r\\nx-ui-version\\r\\nx-requested-with\\r\\n\",\r\n                \"content-encoding: gzip\\r\\ncontent-length: 681\\r\\ncontent-type: application/json; charset=utf-8\\r\\ndate: Fri, 03 Dec 2021 09:34:53 GMT\\r\\nreferrer-policy\\r\\nstrict-transport-security: max-age=15768000\\r\\nx-content-type-options\\r\\nx-frame-options: SAMEORIGIN\\r\\nx-xss-protection\\r\\n\",\r\n                1638524062120,\r\n                0,\r\n                3662,\r\n                null,\r\n                \"{\\\"campaigns\\\":[{\\\"id\\\":\\\"1\\\",\\\"name\\\":\\\"Onboarding Campaign\\\",\\\"type\\\":\\\"behavioral\\\"},{\\\"id\\\":\\\"2\\\",\\\"name\\\":\\\"Re-engage Inactive Users\\\",\\\"type\\\":\\\"behavioral\\\"},{\\\"id\\\":\\\"4\\\",\\\"name\\\":\\\"Order Confirmation\\\",\\\"type\\\":\\\"transactional\\\"},{\\\"id\\\":\\\"5\\\",\\\"name\\\":\\\"Anniversary Campaign\\\",\\\"type\\\":\\\"date\\\"}],\\\"newsletters\\\":[],\\\"transactional_messages\\\":[{\\\"id\\\":\\\"1\\\",\\\"name\\\":\\\"All uncategorized messages\\\",\\\"type\\\":\\\"email\\\"}],\\\"messages\\\":[{\\\"subject\\\":\\\"Welcome to MyApp\\\",\\\"action_id\\\":\\\"3\\\",\\\"template_id\\\":\\\"2\\\",\\\"campaign_id\\\":\\\"1\\\",\\\"newsletter_id\\\":null,\\\"variation\\\":null,\\\"transactional_message_id\\\":null,\\\"output_id\\\":\\\"output_3\\\",\\\"type\\\":\\\"email\\\",\\\"can_segment_on_variation\\\":false},{\\\"subject\\\":\\\"10 Reasons to Upgrade\\\",\\\"action_id\\\":\\\"7\\\",\\\"template_id\\\":\\\"3\\\",\\\"campaign_id\\\":\\\"1\\\",\\\"newsletter_id\\\":null,\\\"variation\\\":null,\\\"transactional_message_id\\\":null,\\\"output_id\\\":\\\"output_7\\\",\\\"type\\\":\\\"email\\\",\\\"can_segment_on_variation\\\":false},{\\\"subject\\\":\\\"Become an expert...\\\",\\\"action_id\\\":\\\"9\\\",\\\"template_id\\\":\\\"4\\\",\\\"campaign_id\\\":\\\"1\\\",\\\"newsletter_id\\\":null,\\\"variation\\\":null,\\\"transactional_message_id\\\":null,\\\"output_id\\\":\\\"output_9\\\",\\\"type\\\":\\\"email\\\",\\\"can_segment_on_variation\\\":false},{\\\"subject\\\":\\\"Check out our latest features!\\\",\\\"action_id\\\":\\\"13\\\",\\\"template_id\\\":\\\"5\\\",\\\"campaign_id\\\":\\\"2\\\",\\\"newsletter_id\\\":null,\\\"variation\\\":null,\\\"transactional_message_id\\\":null,\\\"output_id\\\":\\\"output_13\\\",\\\"type\\\":\\\"email\\\",\\\"can_segment_on_variation\\\":false},{\\\"subject\\\":\\\"Enjoy a free month of access, on us!\\\",\\\"action_id\\\":\\\"14\\\",\\\"template_id\\\":\\\"6\\\",\\\"campaign_id\\\":\\\"2\\\",\\\"newsletter_id\\\":null,\\\"variation\\\":null,\\\"transactional_message_id\\\":null,\\\"output_id\\\":\\\"output_14\\\",\\\"type\\\":\\\"email\\\",\\\"can_segment_on_variation\\\":false},{\\\"subject\\\":\\\"10% off your first month, sign up today!\\\",\\\"action_id\\\":\\\"15\\\",\\\"template_id\\\":\\\"7\\\",\\\"campaign_id\\\":\\\"2\\\",\\\"newsletter_id\\\":null,\\\"variation\\\":null,\\\"transactional_message_id\\\":null,\\\"output_id\\\":\\\"output_15\\\",\\\"type\\\":\\\"email\\\",\\\"can_segment_on_variation\\\":false},{\\\"subject\\\":\\\"Complete a survey for $5\\\",\\\"action_id\\\":\\\"18\\\",\\\"template_id\\\":\\\"8\\\",\\\"campaign_id\\\":\\\"2\\\",\\\"newsletter_id\\\":null,\\\"variation\\\":null,\\\"transactional_message_id\\\":null,\\\"output_id\\\":\\\"output_18\\\",\\\"type\\\":\\\"email\\\",\\\"can_segment_on_variation\\\":false},{\\\"subject\\\":\\\"Let's agree to stay friends\\\",\\\"action_id\\\":\\\"19\\\",\\\"template_id\\\":\\\"9\\\",\\\"campaign_id\\\":\\\"2\\\",\\\"newsletter_id\\\":null,\\\"variation\\\":null,\\\"transactional_message_id\\\":null,\\\"output_id\\\":\\\"output_19\\\",\\\"type\\\":\\\"email\\\",\\\"can_segment_on_variation\\\":false},{\\\"subject\\\":\\\"Thank you for your Purchase!\\\",\\\"action_id\\\":\\\"26\\\",\\\"template_id\\\":\\\"11\\\",\\\"campaign_id\\\":\\\"4\\\",\\\"newsletter_id\\\":null,\\\"variation\\\":null,\\\"transactional_message_id\\\":null,\\\"output_id\\\":\\\"output_26\\\",\\\"type\\\":\\\"email\\\",\\\"can_segment_on_variation\\\":false},{\\\"subject\\\":\\\"10% off your next purchase\\\",\\\"action_id\\\":\\\"29\\\",\\\"template_id\\\":\\\"12\\\",\\\"campaign_id\\\":\\\"4\\\",\\\"newsletter_id\\\":null,\\\"variation\\\":null,\\\"transactional_message_id\\\":null,\\\"output_id\\\":\\\"output_29\\\",\\\"type\\\":\\\"email\\\",\\\"can_segment_on_variation\\\":false},{\\\"subject\\\":\\\"Send thank you gift!\\\",\\\"action_id\\\":\\\"32\\\",\\\"template_id\\\":\\\"13\\\",\\\"campaign_id\\\":\\\"5\\\",\\\"newsletter_id\\\":null,\\\"variation\\\":null,\\\"transactional_message_id\\\":null,\\\"output_id\\\":\\\"webhook_32\\\",\\\"type\\\":\\\"webhook\\\",\\\"can_segment_on_variation\\\":false},{\\\"subject\\\":\\\"Send thank you card with stickers\\\",\\\"action_id\\\":\\\"33\\\",\\\"template_id\\\":\\\"14\\\",\\\"campaign_id\\\":\\\"5\\\",\\\"newsletter_id\\\":null,\\\"variation\\\":null,\\\"transactional_message_id\\\":null,\\\"output_id\\\":\\\"webhook_33\\\",\\\"type\\\":\\\"webhook\\\",\\\"can_segment_on_variation\\\":false},{\\\"subject\\\":\\\"Thank you email\\\",\\\"action_id\\\":\\\"34\\\",\\\"template_id\\\":\\\"15\\\",\\\"campaign_id\\\":\\\"5\\\",\\\"newsletter_id\\\":null,\\\"variation\\\":null,\\\"transactional_message_id\\\":null,\\\"output_id\\\":\\\"output_34\\\",\\\"type\\\":\\\"email\\\",\\\"can_segment_on_variation\\\":false},{\\\"subject\\\":\\\"\\\",\\\"action_id\\\":\\\"t1\\\",\\\"template_id\\\":\\\"1\\\",\\\"campaign_id\\\":null,\\\"newsletter_id\\\":null,\\\"variation\\\":null,\\\"transactional_message_id\\\":\\\"1\\\",\\\"output_id\\\":\\\"transactional_1\\\",\\\"type\\\":\\\"email\\\",\\\"can_segment_on_variation\\\":false}]}\",\r\n                0,\r\n                1\r\n            ],\r\n            \"When\": 54933\r\n        },\r\n        {\r\n            \"Kind\": 42,\r\n            \"Args\": [\r\n                1140,\r\n                811\r\n            ],\r\n            \"When\": 54936\r\n        },\r\n        {\r\n            \"Kind\": 59,\r\n            \"Args\": [\r\n                3060,\r\n                0\r\n            ],\r\n            \"When\": 54936\r\n        },\r\n        {\r\n            \"Kind\": 57,\r\n            \"Args\": [\r\n                2,\r\n                \"https://fly.customer.io/v1/environments/114158/deliveries/filters\",\r\n                55991.09999999404,\r\n                760.2000000178814,\r\n                \"xmlhttprequest\",\r\n                0,\r\n                0,\r\n                55991.09999999404,\r\n                55991.80000001192,\r\n                55991.80000001192,\r\n                55991.80000001192,\r\n                56501.09999999404,\r\n                56274,\r\n                56501.30000001192,\r\n                56749.90000000596,\r\n                56751.30000001192,\r\n                3662,\r\n                681,\r\n                981\r\n            ],\r\n            \"When\": 55186\r\n        },\r\n        {\r\n            \"Kind\": 57,\r\n            \"Args\": [\r\n                2,\r\n                \"https://fs-obfuscated.invalid?url-id=0\",\r\n                56827.59999999404,\r\n                1.2000000178813934,\r\n                \"other\",\r\n                0,\r\n                0,\r\n                56827.59999999404,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                56828.80000001192,\r\n                0,\r\n                0,\r\n                0\r\n            ],\r\n            \"When\": 55186\r\n        },\r\n        {\r\n            \"Kind\": 57,\r\n            \"Args\": [\r\n                2,\r\n                \"https://fly.customer.io/v1/environments/114158/tags\",\r\n                56813.90000000596,\r\n                237.30000001192093,\r\n                \"xmlhttprequest\",\r\n                0,\r\n                0,\r\n                56813.90000000596,\r\n                56813.90000000596,\r\n                56813.90000000596,\r\n                56813.90000000596,\r\n                56813.90000000596,\r\n                56813.90000000596,\r\n                56814.59999999404,\r\n                57050.59999999404,\r\n                57051.20000001788,\r\n                205,\r\n                160,\r\n                460\r\n            ],\r\n            \"When\": 55186\r\n        },\r\n        {\r\n            \"Kind\": 57,\r\n            \"Args\": [\r\n                2,\r\n                \"https://fly.customer.io/v1/environments/114158/track_event\",\r\n                56818.80000001192,\r\n                258.7999999821186,\r\n                \"xmlhttprequest\",\r\n                0,\r\n                0,\r\n                56818.80000001192,\r\n                56818.80000001192,\r\n                56818.80000001192,\r\n                56818.80000001192,\r\n                56818.80000001192,\r\n                56818.80000001192,\r\n                56819.5,\r\n                57077.40000000596,\r\n                57077.59999999404,\r\n                4,\r\n                28,\r\n                328\r\n            ],\r\n            \"When\": 55186\r\n        },\r\n        {\r\n            \"Kind\": 63,\r\n            \"Args\": [\r\n                \"GET\",\r\n                \"https://fly.customer.io/v1/environments/114158/tags\",\r\n                240,\r\n                200,\r\n                \"accept: application/json, text/javascript, */*; q=0.01\\r\\nauthorization\\r\\nx-ui-version\\r\\nx-requested-with\\r\\n\",\r\n                \"content-encoding: gzip\\r\\ncontent-length: 160\\r\\ncontent-type: application/json; charset=utf-8\\r\\ndate: Fri, 03 Dec 2021 09:34:53 GMT\\r\\nreferrer-policy\\r\\nstrict-transport-security: max-age=15768000\\r\\nx-content-type-options\\r\\nx-frame-options: SAMEORIGIN\\r\\nx-xss-protection\\r\\n\",\r\n                1638524062943,\r\n                0,\r\n                205,\r\n                null,\r\n                \"{\\\"tags\\\":[{\\\"id\\\":1,\\\"name\\\":\\\"Sample\\\",\\\"color\\\":\\\"gray\\\",\\\"campaigns_used\\\":4,\\\"segments_used\\\":9,\\\"newsletters_used\\\":0,\\\"api_triggered_used\\\":0,\\\"transactional_messages_used\\\":0,\\\"created\\\":1638514189,\\\"updated\\\":1638514189}]}\",\r\n                0,\r\n                1\r\n            ],\r\n            \"When\": 55378\r\n        },\r\n        {\r\n            \"Kind\": 63,\r\n            \"Args\": [\r\n                \"POST\",\r\n                \"https://fly.customer.io/v1/environments/114158/track_event\",\r\n                261,\r\n                200,\r\n                \"content-type: application/json\\r\\naccept: */*\\r\\nauthorization\\r\\nx-ui-version\\r\\nx-requested-with\\r\\n\",\r\n                \"content-encoding: gzip\\r\\ncontent-length: 28\\r\\ncontent-type: application/json; charset=utf-8\\r\\ndate: Fri, 03 Dec 2021 09:34:53 GMT\\r\\nreferrer-policy\\r\\nstrict-transport-security: max-age=15768000\\r\\nx-content-type-options\\r\\nx-frame-options: SAMEORIGIN\\r\\nx-xss-protection\\r\\n\",\r\n                1638524062947,\r\n                437,\r\n                4,\r\n                \"{\\\"event\\\":\\\"Segment: Creation Started\\\",\\\"properties\\\":{\\\"path\\\":\\\"/env/114158/segments/new\\\",\\\"referrer\\\":\\\"https://fly.customer.io/login/password\\\",\\\"search\\\":\\\"\\\",\\\"title\\\":\\\"New | Segments | Customer.io\\\",\\\"url\\\":\\\"https://fly.customer.io/env/114158/segments/new\\\",\\\"user_agent\\\":\\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\\\",\\\"segment_anonymous_id\\\":\\\"9a20beef-2177-4109-8233-b683627cb09d\\\"}}\",\r\n                \"null\",\r\n                1,\r\n                1\r\n            ],\r\n            \"When\": 55378\r\n        },\r\n        {\r\n            \"Kind\": 87,\r\n            \"Args\": [\r\n                [\r\n                    \"https://customer.io/docs/documentation/segmenting-users.html#data-driven-segments\",\r\n                    49\r\n                ],\r\n                [\r\n                    \"https://customer.io/docs/documentation/segmenting-users.html#manual-segments\",\r\n                    50\r\n                ]\r\n            ],\r\n            \"When\": 55475\r\n        },\r\n        {\r\n            \"Kind\": 78,\r\n            \"Args\": [\r\n                [\r\n                    0,\r\n                    1,\r\n                    3,\r\n                    55475,\r\n                    0,\r\n                    [\r\n                        3,\r\n                        0\r\n                    ],\r\n                    [\r\n                        3,\r\n                        0\r\n                    ],\r\n                    [\r\n                        3,\r\n                        0\r\n                    ],\r\n                    [\r\n                        3,\r\n                        0\r\n                    ],\r\n                    [\r\n                        3,\r\n                        0\r\n                    ],\r\n                    [\r\n                        3,\r\n                        1\r\n                    ],\r\n                    [\r\n                        3,\r\n                        0\r\n                    ]\r\n                ]\r\n            ],\r\n            \"When\": 55475\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://fly.customer.io/v1/environments/114158/track_event",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"environments",
										"114158",
										"track_event"
									]
								}
							},
							"response": []
						},
						{
							"name": "post Copy 2",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"OrgId\": \"MVQPJ\",\r\n    \"UserId\": \"5871973373337600\",\r\n    \"Url\": \"https://fly.customer.io/env/114158/segments/new\",\r\n    \"Base\": \"https://fly.customer.io/env/114158/segments/new\",\r\n    \"Width\": 712,\r\n    \"Height\": 678,\r\n    \"ScreenWidth\": 1366,\r\n    \"ScreenHeight\": 768,\r\n    \"Referrer\": \"https://fly.customer.io/login/password\",\r\n    \"Preroll\": 1853,\r\n    \"Doctype\": \"<!DOCTYPE html>\",\r\n    \"CompiledVersion\": \"a91106ef34\",\r\n    \"CompiledTimestamp\": 1636568183,\r\n    \"AppId\": \"302921\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://rs.fullstory.com/rec/page",
									"protocol": "https",
									"host": [
										"rs",
										"fullstory",
										"com"
									],
									"path": [
										"rec",
										"page"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Profile",
					"item": [
						{
							"name": "New Request Copy 2-relevant",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://fly.customer.io/v1/environments/114158/customers/{{profile_cio_id1}}/segments",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"environments",
										"114158",
										"customers",
										"{{profile_cio_id1}}",
										"segments"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 3",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://fly.customer.io/v1/environments/114158/customers/{{profile_cio_id1}}/last_messaged",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"environments",
										"114158",
										"customers",
										"{{profile_cio_id1}}",
										"last_messaged"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 4",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://fly.customer.io/v1/environments/114158/backfills",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"environments",
										"114158",
										"backfills"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 5",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://fly.customer.io/v1/environments/114158/logs?internal_id=eefb06000001&limit=5&since=true",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"environments",
										"114158",
										"logs"
									],
									"query": [
										{
											"key": "internal_id",
											"value": "eefb06000001"
										},
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "since",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 6",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token1}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://fly.customer.io/v1/environments/114158/deliveries?internal_id=eefb06000001&size=5&states=sent%2Cfailed%2Cbounced",
									"protocol": "https",
									"host": [
										"fly",
										"customer",
										"io"
									],
									"path": [
										"v1",
										"environments",
										"114158",
										"deliveries"
									],
									"query": [
										{
											"key": "internal_id",
											"value": "eefb06000001"
										},
										{
											"key": "size",
											"value": "5"
										},
										{
											"key": "states",
											"value": "sent%2Cfailed%2Cbounced"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"function createRandomAlphabet() {",
					"  var text = \"\";",
					"  var possible = \"qwertyuioplkjhgfdsamnbvcxzASDFGHJKLPOIUYTREWQZXCVBNM\";",
					"  for (var i = 0; i < 10; i++)",
					"    text += possible.charAt(Math.floor(Math.random() * possible.length));",
					"  return text;",
					"}",
					"var randomAlphabet = createRandomAlphabet();",
					"postman.setEnvironmentVariable(\"randomAlphabet\", randomAlphabet);",
					"",
					"",
					"function createRandomSpecialChar() {",
					"  var text = \"\";",
					"  var possible = \"!@#$%^&*()_+-={}|[]\\:;',./<>?|\";",
					"  for (var i = 0; i < 10; i++)",
					"    text += possible.charAt(Math.floor(Math.random() * possible.length));",
					"  return text;",
					"}",
					"var randomSpecialCha = createRandomSpecialChar();",
					"postman.setEnvironmentVariable(\"randomSpecialCha\", randomSpecialCha);",
					"",
					"",
					"function greaterThanCharLength() {",
					"  var text = \"\";",
					"  var possible = \"1234567890\";",
					"  for (var i = 0; i < 700; i++)",
					"    text += possible.charAt(Math.floor(Math.random() * possible.length));",
					"  return text;",
					"}",
					"var GrtThanExpected = greaterThanCharLength();",
					"postman.setEnvironmentVariable(\"GrtThanExpected\", GrtThanExpected);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}